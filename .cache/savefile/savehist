;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(magit-revision-history xref--read-pattern-history counsel-describe-symbol-history face-name-history org-agenda-search-history org-refile-history org-read-date-history ess--completing-hist counsel-imenu-history imenu--history-list pyvenv-workon-history counsel-apropos-history tmm--history TeX-command-history dired-shell-command-history info-lookup-history read-char-history bibtex-key-history org-link--history shell-command-history tex-compile-history org-tags-history read-number-history empty-history helm-grep-ag-history helm-ag--helm-history helm-ag--command-history woman-topic-history regexp-history yes-or-no-p-history minibuffer-history swiper-history counsel-ibuffer-history ivy-history counsel-M-x-history input-method-history evil-ex-history buffer-name-history file-name-history extended-command-history))
(setq magit-revision-history '(#("origin/master" 0 13 (ivy-index 0)) #("master" 0 6 (ivy-index 0)) #("HEAD" 0 4 (ivy-index 1))))
(setq counsel-describe-symbol-history '(#("resize mini" 0 11 (ivy-index 1)) "resize-mini-windows"))
(setq face-name-history '("org-document-title" "lsp-face-highlight-write" "org-agenda-date-today" "org-document-title" "org-level-1" "minibuffer-prompt" "org-level-2" "org-agenda-date-weekend" "org-agenda-date" "org-agenda-structure" "org-agenda-date-today" "org-agenda-structure"))
(setq org-read-date-history '("   " "+2    " "22:00    " "10:00    " "22:00    " "10:20+2    " "19:40+1    " "14:00+9    " "14:00+1    " "18:00    " "14:00+14    " "14:00-20:00    " "20:00    " "   " " .+1d/2d    " "24:00 .+1d/3d    " "19:00    " "1:30-2:00    " "23:00    " "15:00    " "22:00    " "14:00-18:00    " "24:00    " "23:00    " "   " "2021-4-1 12:00    " " 2021-4-30 8:50 + 7d    " "   " "04-29    " "   "))
(setq imenu--history-list '(#("Module" 0 6 (ivy-index 1 idx 0)) #("Variable" 0 8 (ivy-index 2 idx 2))))
(setq pyvenv-workon-history '(#("py38" 0 4 (ivy-index 1))))
(setq tmm--history '("r==>Revert Buffer              s-u" "q==>Quit                   C-x C-c" "p==>Print" "1==>New Frame on Monitor..." "F==>New Frame on Display..." "f==>New Frame              C-x 5 2" "0==>Remove Other Windows     C-x 1" "N==>New Window on Right      C-x 3" "n==>New Window Below         C-x 2" "R==>Recover Crashed Session" "r==>Revert Buffer              s-u" "S==>Save As...             C-x C-w" "s==>Save                   C-x C-s" "c==>Close                C-SPC b d" "i==>Insert File...           C-x i" "d==>Open Directory...        C-x d" "O==>Open File..." "o==>Open Recent" "v==>Visit New File...      C-x C-f"))
(setq TeX-command-history '(#("Clean All" 0 9 (ivy-index 18 idx 18)) #("Dvipdfmx" 0 8 (ivy-index 16 idx 16)) #("LaTeX" 0 5 (ivy-index 0 idx 0))))
(setq org-tags-history '(#("q" 0 1 (ivy-index 0))))
(setq helm-ag--helm-history '("evil-set ini" "dired norma" "evil-leader/set-key-for-mode" "major mode leader" "deft" "transient" "use helm" "winum" "multiple" "declare" "declare SPC" "declare  SPC" "declare SPC" "with" "dired" "cache" "transie" "pyim" "my git" "org clock" "counsel git" "avy" "color green" "which ke" "defh" "golden" "def hy" "global set" "org clock" "lambda in" "which key dec" "idiig/declare-prefix-for-mode" "idiig//lsp-declare-prefixes-for-mode" "evil-leader/set-key-for" "evil-leader/set-key-for-mode" "set key for" "あと" "oCc" "C org cap" "active pro" "bind map" "quelp" "quelpa" "quel" "define key map" "counsel git" "normal" "dired" "eviln" "dired" "hook" "evilnc" "dired" "evil-org-agenda" "evil state" "mode map" ":bind" "evil map" #("evilified-state-evilify-map" 0 27 (fontified t)) "evil state" "occur mode ma" "state evili" "evilified" "declare" "evil-leader/set-key-for-mode" "rainbow " "company box" "idiig" "wgrep" "wgre" "occur" "evil surr" "idiig" "doom-modeline-segment--matches" "normal  state" "leader key set" "evil-leader/set-key" "sak" "evilified" "deft" "global set" "evil" "mode map" "set key" "warning" "dired mode map" "occur" "set key" "evil" "popwin" "popw" "cust" "popwin" "project" "python" "set key mode" "set key" "leader" "ddskk" "yas"))
(setq helm-ag--command-history '("spacemacs/helm-file-do-ag" "defun" "idiig" "exec-path" "idiig" "\"ag\"" "ag" "sss" "ag" "manage" "idiig" "e"))
(setq regexp-history '(#(":defer" 0 6 (face font-lock-builtin-face fontified t)) nil nil #("ivy-resume" 0 10 (fontified t)) nil nil #("org-agenda-mode-map" 0 19 (fontified t)) "emacs" #("dotspacemacs-leader-key" 0 23 (face font-lock-variable-name-face fontified t)) "spacemacs" #("org-clock-jump-to-current-clock" 0 30 (fontified t) 30 31 (rear-nonsticky t fontified t)) "idiig" nil nil nil nil nil nil "idiig" #("modules/idiig-org" 0 17 (read-only t rear-nonsticky t front-sticky t face font-lock-function-name-face intangible t)) #("idiig/org-setup-evil-surround" 0 29 (fontified t face font-lock-function-name-face)) nil "evil" nil "win" nil "\\+RESULTS" "\\+RESULTS" "\\+RESULTS" "\\+RESULTS" #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("spac" 0 4 (ivy-index 0)) "spac" "PPMI" "mathbf" "mathbf" nil nil nil nil "bibliography{test\\.bib}" "bib" "bib" nil #("org-latex-compiler" 0 18 (face font-lock-comment-face fontified t)) "(with-eval-after-load \"ox-latex\"
  (add-to-list 'org-latex-classes
               '(\"bxjsarticle\"
                 \"
\\\\documentclass[xelatex,dvi=dvipdfmx,11pt,ja=standard]{bxjsarticle}
\\\\usepackage{amsmath}
\\\\usepackage{graphicx}
\\\\usepackage[T1]{fontenc}
\\\\usepackage{geometry}
\\\\geometry{a4paper,left=20mm,right=20mm,top=8mm,bottom=12mm,heightrounded}
\\\\usepackage{subcaption}
\\\\usepackage{otf}
\\\\usepackage[yyyymmdd]{datetime}
\\\\renewcommand{\\\\dateseparator}{/}
\\\\usepackage{longtable}
\\\\usepackage{float}
\\\\usepackage{wrapfig}
\\\\usepackage{rotating}
\\\\usepackage[normalem]{ulem}
\\\\usepackage{textcomp}
\\\\usepackage{multicol}
\\\\usepackage{marvosym}
\\\\usepackage{wasysym}
\\\\usepackage{amssymb}
\\\\usepackage{booktabs}
\\\\tolerance=1000
\\\\usepackage{xcolor}
\\\\usepackage{hyperref}
\\\\ifdefined\\\\kanjiskip
  \\\\usepackage{pxjahyper}
  \\\\hypersetup{colorlinks=true,citecolor=blue}
\\\\else
  \\\\ifdefined\\\\XeTeXversion
      \\\\hypersetup{colorlinks=true,citecolor=blue}
  \\\\else
    \\\\ifdefined\\\\directlua
      \\\\hypersetup{pdfencoding=auto,colorlinks=true,citecolor=blue}
    \\\\else
      \\\\hypersetup{unicode,colorlinks=true,citecolor=blue}
    \\\\fi
  \\\\fi
\\\\fi
%
\\\\usepackage{tikz}
\\\\usepackage[authoryear]{natbib}
\\\\bibpunct[: ]{(}{)}{,}{a}{}{,}
\\\\usepackage{url}
%
\\\\usepackage{listings}
\\\\lstset{
basicstyle=\\\\small\\\\ttfamily,
numbers=left,
numberstyle=\\\\footnotesize,
stepnumber=1,
numbersep=5pt,
backgroundcolor=\\\\color{white},
showspaces=false,
showstringspaces=false,
showtabs=false,
frame=tb,
tabsize=2,
captionpos=b,
breaklines=true,
breakatwhitespace=false,
escapeinside={\\\\%*}{*)} 
}
%
\\\\usepackage{etoolbox}
\\\\makeatletter
\\\\patchcmd{\\\\@verbatim}
  {\\\\verbatim@font}
  {\\\\verbatim@font\\\\small}
  {}{}
\\\\makeatother
%
% Footnote setting
\\\\usepackage{footmisc}
\\\\DefineFNsymbols{mySymbols}{{\\\\ensuremath\\\\dagger}{\\\\ensuremath\\\\ddagger}\\\\S\\\\P
   *{**}{\\\\ensuremath{\\\\dagger\\\\dagger}}{\\\\ensuremath{\\\\ddagger\\\\ddagger}}}
\\\\setfnsymbol{mySymbols}
\\\\renewcommand{\\\\thefootnote}{\\\\arabic{footnote}\\\\enspace}
%
\\\\usepackage{fancyhdr}
\\\\pagestyle{fancyplain}
\\\\fancyhf{}
\\\\chead{\\\\fancyplain{}{\\\\jobname}}
\\\\lhead{\\\\fancyplain{}{\\\\today\\\\enspace\\\\currenttime}}
\\\\rhead{\\\\fancyplain{}{\\\\includegraphics[width=0.2\\\\textwidth]{/Users/idiig/Nutstore/tex_related/tokyotechmark.eps}}}
\\\\cfoot{\\\\fancyplain{}{\\\\thepage}}
%
\\\\usepackage{caption}
\\\\captionsetup[figure]{labelfont={bf}, labelsep=colon, justification=raggedright, format=hang}
\\\\captionsetup[table]{labelfont={bf}, labelsep=colon, justification=raggedright, format=hang}
%
\\\\usepackage{framed}
\\\\renewenvironment{quote}[1][\\\\hsize]
{%
  \\\\def\\\\FrameCommand
  {%
    {\\\\color{gray}\\\\vrule width 4pt}%
    \\\\hspace{0pt}%must no space.
    \\\\fboxsep=\\\\FrameSep\\\\colorbox{white}%
  }%
  \\\\MakeFramed{\\\\hsize#1\\\\advance\\\\hsize-\\\\width\\\\FrameRestore}%
}
{\\\\endMakeFramed}
%
\\\\makeatletter
\\\\renewcommand{\\\\maketitle}{\\\\bgroup\\\\setlength{\\\\parindent}{0pt}
\\\\begin{flushleft}
  \\\\ \\\\\\\\
  \\\\vspace{-0.5em}
  \\\\Large{\\\\textsf{\\\\@title}}\\\\\\\\
  \\\\normalsize\\\\@author
\\\\end{flushleft}\\\\egroup
\\\\vspace{-1em}
}
\\\\makeatother
\"
                 (\"\\\\section{%s}\" . \"\\\\section*{%s}\")
                 (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")
                 (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")
                 (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")
                 (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))))" "d-to-" nil nil #("idiig-core" 0 10 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t)) #("C-r" 0 3 (face font-lock-string-face fontified t)) nil #("spacemacs" 0 9 (ivy-index 3)) nil "sa" #("ve" 0 2 (ivy-index 0)) #("defvar" 0 6 (face font-lock-keyword-face fontified t)) #("defvar" 0 6 (face font-lock-keyword-face fontified t)) #("1" 0 1 (face underline read-only t)) #("aluation" 0 8 (help-echo "mouse-1: call ivy-action" mouse-face highlight face font-lock-comment-face fontified t)) #("ve" 0 2 (ivy-index 6)) "ve" "ev" #("To" 0 2 (face font-lock-comment-face fontified t)) #("To" 0 2 (face font-lock-comment-face fontified t)) #("To" 0 2 (fontified t face font-lock-comment-face)) #("To" 0 2 (face font-lock-comment-face fontified t)) #("create" 0 6 (face font-lock-comment-face fontified t)) #("create" 0 6 (face font-lock-comment-face fontified t)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("enter" 0 5 (fontified t face font-lock-comment-face)) #("create" 0 6 (fontified t face font-lock-comment-face)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("create" 0 6 (fontified t face font-lock-comment-face)) nil #("is" 0 2 (face font-lock-comment-face fontified t)) #("is" 0 2 (face font-lock-comment-face fontified t)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("use-package" 0 8 (fontified t face font-lock-keyword-face) 8 11 (fontified t face font-lock-keyword-face)) #("use-package" 0 8 (fontified t face font-lock-keyword-face) 8 11 (fontified t face font-lock-keyword-face)) nil #("evil-leader/set-key" 0 19 (fontified t)) #("global-set-key" 0 14 (fontified t)) #("global-set-key" 0 14 (fontified t)) nil #("global-set-key" 0 14 (fontified t)) "global-set-key" "global" #("iedit" 0 5 (fontified t face font-lock-constant-face)) nil #("ivy" 0 3 (fontified t face font-lock-comment-face)) #("To" 0 2 (fontified t face font-lock-comment-face)) "e" #("map" 0 3 (fontified t face font-lock-comment-face)) "e" nil "glo" "thing" nil "re" "r" nil "t"))
(setq yes-or-no-p-history '("yes" "yeas" "yes" "tes" "yes" "tes" "yes" "no" "yes"))
(setq minibuffer-history '("python" "sh" "23" "tes" "12" "4" "14" "20" "1" "10" "1" "2" "3" "71" "1796" "1799" "1813" "17" "30" "13" "26" "sh" "emacs-lisp" "sh" "524" "2" "Reminder" "0.1" "Reminder" "1" "Reminder" "10" "2" "1" "R" "20" "q>" "33" "python" "/Users/idiig/.emacs.d/modules/" "/Users/idiig/anaconda3/bin/pyflakes s.py" "label:eq:2" "2007" "hey" "label:eq:1" "label:sec:1" #("martinc_leveraging_2020" 0 22 (font-lock-multiline t htmlize-link (:uri "citet:giulianelli_analysing_2020,martinc_leveraging_2020") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 22 23 (font-lock-multiline t htmlize-link (:uri "citet:giulianelli_analysing_2020,martinc_leveraging_2020") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) "2" #("hilpert_using_2020" 0 18 (font-lock-multiline t keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face invisible full htmlize-link (:uri "Citep:hilpert_using_2020") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) fontified t)) "2" #("yamamoto_hachidaishu_2010" 0 24 (font-lock-multiline t htmlize-link (:uri "citet:yamamoto_hachidaishu_2010") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 24 25 (font-lock-multiline t htmlize-link (:uri "citet:yamamoto_hachidaishu_2010") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) "lev" "hey" "ya" "de" "Dee" "BER" "p.4818" "
" "pa" "par" "2020" "lenci" "dont" "Hey" "M" #("giulianelli_analysing_2020" 0 25 (fontified t help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citet:giulianelli_analysing_2020") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 25 26 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citet:giulianelli_analysing_2020") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t)) "Gi" "de" "see" "hilp" "sc" "e.g." "He" "hu" "mar" "pe" "BE" "ham" "p.238" "embed" "citep" "0" "addbibresource:test.bib" "test.bib" "addbibresource:test.bib" "printbibliography:test.bib" "addbibresource:test.bib" #("tanaka2014" 0 8 (font-lock-multiline t keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 . org-ref-open-pdf-at-point) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face htmlize-link (:uri "cite:Jacques2010,tanaka2014") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) fontified t) 8 9 (font-lock-multiline t keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 . org-ref-open-pdf-at-point) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "cite:Jacques2010,tanaka2014") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) fontified t) 9 10 (font-lock-multiline t keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 . org-ref-open-pdf-at-point) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face htmlize-link (:uri "cite:Jacques2010,tanaka2014") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) #("Jacques2010" 0 10 (font-lock-multiline t htmlize-link (:uri "cite:linluo03,Sun2006,Jacques2010") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 . org-ref-open-pdf-at-point) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 10 11 (font-lock-multiline t htmlize-link (:uri "cite:linluo03,Sun2006,Jacques2010") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 . org-ref-open-pdf-at-point) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) "bibliographystyle:https://raw.githubusercontent.com/langsci/101/master/unified.bst" "bibliographystyle:jecon" "bibliographystyle:./jecon.bst" "bibliographystyle:jecon" "/Users/idiig/" "/Users/idiig/.emacs.d" "/Users/idiig/." "/Users/idiig/.emacs.d/modules/" "idii" "/Users/idiig/.emacs.d/modules/ei"))
(setq swiper-history '(#("file" 0 4 (ivy-index 0)) #(" Show Value Dap Breakpoints File " 0 1 (swiper-line-number 24 display "24 ") 1 11 (display (image :type xpm :file "/usr/local/Cellar/emacs-plus@27/27.2/share/emacs/27.2/etc/images/custom/right.xpm" :ascent center) rear-nonsticky t keymap (keymap (111 . image-save) (114 . image-rotate) (C-mouse-4 . image-mouse-increase-size) (C-wheel-up . image-mouse-increase-size) (C-mouse-5 . image-mouse-decrease-size) (C-wheel-down . image-mouse-decrease-size) (43 . image-increase-size) (45 . image-decrease-size)))) "dao" #(" Show Value Lsp Session File " 0 1 (swiper-line-number 210 display "210 ") 1 11 (display (image :type xpm :file "/usr/local/Cellar/emacs-plus@27/27.2/share/emacs/27.2/etc/images/custom/right.xpm" :ascent center) rear-nonsticky t keymap (keymap (111 . image-save) (114 . image-rotate) (C-mouse-4 . image-mouse-increase-size) (C-wheel-up . image-mouse-increase-size) (C-mouse-5 . image-mouse-decrease-size) (C-wheel-down . image-mouse-decrease-size) (43 . image-increase-size) (45 . image-decrease-size)))) #("wgre" 0 4 (ivy-index 0)) #(" (use-package wgrep" 0 1 (swiper-line-number 151 display "151 ") 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-constant-face)) #("evil" 0 4 (ivy-index 1)) #("       (add-hook 'with-editor-mode-hook 'evil-normalize-keymaps)" 0 1 (display "102 " swiper-line-number 102) 1 64 (fontified t)) #("     (evil-leader/set-key" 0 1 (display "65  " swiper-line-number 65) 1 25 (fontified t)) #("ze" 0 2 (ivy-index 8)) #(" (use-package zetteldeft" 0 1 (swiper-line-number 265 display "265  ") 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 24 (fontified t face font-lock-constant-face)) "avy" #("emph" 0 4 (ivy-index 7)) #("     (defmacro idiig|org-emphasize (fname char)" 0 1 (display "643  " swiper-line-number 643) 1 6 (fontified t) 6 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 34 (face font-lock-function-name-face fontified t) 34 47 (fontified t)) #("export" 0 6 (ivy-index 1)) #("       \"ee\" 'org-export-dispatch" 0 1 (display "460  " swiper-line-number 460) 1 7 (fontified t) 7 11 (face font-lock-string-face fontified t) 11 32 (fontified t)) "e" #("which" 0 5 (ivy-index 25)) #(" (which-key-declare-prefixes \"C-SPC oC\" \"org-clocks\")" 0 1 (display "51  " swiper-line-number 51) 1 29 (fontified t) 29 39 (face font-lock-string-face fontified t) 39 40 (fontified t) 40 52 (face font-lock-string-face fontified t) 52 53 (fontified t)) #("ag" 0 2 (ivy-index 22)) #("     (defvar idiig-search-tools '(\"ag\"))         ;; 检索工具设置为ag。可添加，添加时需要增加之后的函数" 0 1 (display "272 " swiper-line-number 272) 1 6 (fontified t) 6 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 31 (face font-lock-variable-name-face fontified t) 31 32 (fontified t) 32 34 (fontified t) 34 38 (face font-lock-string-face fontified t) 38 49 (fontified t) 49 52 (face font-lock-comment-delimiter-face fontified t) 52 78 (face font-lock-comment-face fontified t)) #("deft" 0 4 (ivy-index 15)) #("     (evil-leader/set-key-for-mode 'deft-mode-map)" 0 1 (display "110  " swiper-line-number 110) 1 50 (fontified t)) #("deft dir" 0 8 (ivy-index 2)) #("     (setq deft-directory deft-dir)))" 0 1 (swiper-line-number 102 display "102  ") 1 6 (fontified t) 6 10 (fontified t face font-lock-keyword-face) 10 37 (fontified t)) "conten" #("token_content" 0 13 (ivy-index 0)) #("     1. coupus: with a column named `token_content`" 0 1 (swiper-line-number 60 display "60  ") 1 51 (fontified t face font-lock-doc-face)) "py" "skk" #("babel" 0 5 (ivy-index 25)) #("      'org-babel-load-languages" 0 1 (swiper-line-number 715 display "715  ") 1 31 (fontified t)) "babel'" #("ja" 0 2 (ivy-index 1)) #("   ├─[idiig-japanese require 434ms]" 0 1 (swiper-line-number 135 display "135 ") 6 20 (face benchmark-init/name-face) 21 28 (face benchmark-init/type-face) 29 34 (face benchmark-init/duration-face)) "japa" "mode" #("japa" 0 4 (ivy-index 0)) #("   ├─[idiig-japanese require 426ms]" 0 1 (display "131 " swiper-line-number 131) 6 20 (face benchmark-init/name-face) 21 28 (face benchmark-init/type-face) 29 34 (face benchmark-init/duration-face)) "\\\\\\" #("   ├─[idiig-japanese require 419ms]" 0 1 (display "131 " swiper-line-number 131) 6 20 (face benchmark-init/name-face) 21 28 (face benchmark-init/type-face) 29 34 (face benchmark-init/duration-face)) #("don" 0 3 (ivy-index 1)) #(" ;; Don't ask me when close emacs with process is running" 0 1 (display "80  " swiper-line-number 80) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 56 (face font-lock-comment-face fontified t) 56 57 (face font-lock-comment-face fontified t)) #(" ;; Don't ask me when close emacs with process is running" 0 1 (display "80  " swiper-line-number 80) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 57 (face font-lock-comment-face fontified t)) "bench" "bind" #("SPC" 0 3 (ivy-index 4)) #("SPC
   \"If `simple' binds lightweight navigation functions under `SPC m g'.
 If `peek' binds lsp-ui navigation functions under `SPC m g'.
 If `both', binds lightweight navigation functions under `SPC m g' and lsp-ui functions under `SPC m G'\")
   (which-key-declare-prefixes \"SPC m=\" \"format\")
   (which-key-declare-prefixes \"SPC ma\" \"code actions\")
   (which-key-declare-prefixes \"SPC mb\" \"backend\")
   (which-key-declare-prefixes \"SPC mF\" \"folder\")
   (which-key-declare-prefixes \"SPC mg\" \"goto\")
   (which-key-declare-prefixes \"SPC mG\" \"peek\")
   (which-key-declare-prefixes \"SPC mh\" \"help\")
   (which-key-declare-prefixes \"SPC mr\" \"refactor\")
   (which-key-declare-prefixes \"SPC mT\" \"toggle\")
   (which-key-declare-prefixes \"SPC mx\" \"text/code\")
   (dolist (prefix '(\"SPC mg\" \"SPC mG\"))" 3 4 (read-only nil) 4 5 (swiper-line-number 4 display "4   " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 5 7 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 7 12 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 12 18 (fontified t face (font-lock-constant-face font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 18 66 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 66 69 (fontified t face (ivy-minibuffer-match-face-2 font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 69 75 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 75 76 (read-only nil) 76 77 (swiper-line-number 5 display "5   " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 77 81 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 81 85 (fontified t face (font-lock-constant-face font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 85 128 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 128 131 (fontified t face (ivy-minibuffer-match-face-2 font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 131 137 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 137 138 (read-only nil) 138 139 (swiper-line-number 6 display "6   " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 139 143 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 143 147 (fontified t face (font-lock-constant-face font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 147 196 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 196 199 (fontified t face (ivy-minibuffer-match-face-2 font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 199 233 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 233 236 (fontified t face (ivy-minibuffer-match-face-2 font-lock-doc-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 236 242 (fontified t face font-lock-doc-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 242 243 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 243 244 (read-only nil) 244 245 (swiper-line-number 125 display "125 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 245 275 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 275 276 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 276 279 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 279 283 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 283 284 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 284 292 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 292 293 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 293 294 (read-only nil) 294 295 (swiper-line-number 126 display "126 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 295 325 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 325 326 (fontified t face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 326 329 (fontified t face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 329 333 (fontified t face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 333 334 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 334 348 (fontified t face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 348 349 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 349 350 (read-only nil) 350 351 (swiper-line-number 127 display "127 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 351 381 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 381 382 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 382 385 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 385 389 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 389 390 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 390 399 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 399 400 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 400 401 (read-only nil) 401 402 (swiper-line-number 128 display "128 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 402 432 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 432 433 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 433 436 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 436 440 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 440 441 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 441 449 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 449 450 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 450 451 (read-only nil) 451 452 (swiper-line-number 129 display "129 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 452 482 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 482 483 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 483 486 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 486 490 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 490 491 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 491 497 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 497 498 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 498 499 (read-only nil) 499 500 (swiper-line-number 130 display "130 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 500 530 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 530 531 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 531 534 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 534 538 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 538 539 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 539 545 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 545 546 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 546 547 (read-only nil) 547 548 (swiper-line-number 131 display "131 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 548 578 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 578 579 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 579 582 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 582 586 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 586 587 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 587 590 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 590 593 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 593 594 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 594 595 (read-only nil) 595 596 (swiper-line-number 132 display "132 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 596 626 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 626 627 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 627 630 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 630 634 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 634 635 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 635 645 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 645 646 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 646 647 (read-only nil) 647 648 (swiper-line-number 133 display "133 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 648 678 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 678 679 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 679 682 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 682 686 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 686 687 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 687 695 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 695 696 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 696 697 (read-only nil) 697 698 (swiper-line-number 134 display "134 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 698 728 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 728 729 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 729 732 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 732 736 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 736 737 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 737 748 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 748 749 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 749 750 (read-only nil) 750 751 (swiper-line-number 135 display "135 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 751 754 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 754 760 (fontified t face font-lock-keyword-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 760 771 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 771 772 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 772 775 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 775 779 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 779 780 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 780 781 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 781 784 (fontified t face (ivy-minibuffer-match-face-2 font-lock-string-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 784 788 (fontified t face font-lock-string-face mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 788 790 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil)) #("decl" 0 4 (ivy-index 6)) #("     (which-key-declare-prefixes \"gl\" \"links\")" 0 1 (swiper-line-number 179 display "179 ") 1 33 (fontified t) 33 37 (fontified t face font-lock-string-face) 37 38 (fontified t) 38 45 (fontified t face font-lock-string-face) 45 46 (fontified t)) #("high" 0 4 (ivy-index 1)) #("     (which-key-declare-prefixes \"gH\" \"highlight\")" 0 1 (swiper-line-number 157 display "157 ") 1 33 (fontified t) 33 37 (fontified t face font-lock-string-face) 37 38 (fontified t) 38 49 (fontified t face font-lock-string-face) 49 50 (fontified t)) #("dec" 0 3 (ivy-index 0)) #("     (which-key-declare-prefixes \",t\" \"pytest\")" 0 1 (swiper-line-number 37 display "37 ") 1 33 (fontified t) 33 37 (fontified t face font-lock-string-face) 37 38 (fontified t) 38 46 (fontified t face font-lock-string-face) 46 47 (fontified t)) #("define key dire" 0 15 (ivy-index 1)) #("define key dire
   (evil-define-key 'normal dired-mode-map \"e\" 'ora-ediff-files)
   (define-key dired-mode-map (kbd \"C-k\") 'idiig/dired-up-directory)
   (define-key dired-mode-map (kbd \"<RET>\") 'dired-find-alternate-file)
   (define-key dired-mode-map \"E\" 'dired-toggle-read-only)
   (define-key dired-mode-map \"C\" 'dired-do-copy)
   (define-key dired-mode-map (kbd \"<mouse-2>\") 'my-dired-find-file)
   (define-key dired-mode-map \"`\" 'dired-open-term)
   ;; (define-key dired-mode-map \"p\" 'peep-dired-prev-file)
   ;; (define-key dired-mode-map \"n\" 'peep-dired-next-file)
   (define-key dired-mode-map \"g\" 'revert-buffer)
   (define-key dired-mode-map \"z\" 'dired-get-size)
   (define-key dired-mode-map \"c\" 'dired-copy-file-here)
   (define-key dired-mode-map \"J\" 'counsel-find-file)
   ;; (define-key dired-mode-map \"f\" 'idiig/open-file-with-projectile-or-counsel-git)" 15 16 (read-only nil) 16 17 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "131 " swiper-line-number 131) 17 20 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 20 25 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 25 31 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-keyword-face) fontified t) 31 32 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 32 35 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-keyword-face) fontified t) 35 44 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 44 48 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 48 59 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 59 62 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 62 80 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 80 81 (read-only nil) 81 82 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "132 " swiper-line-number 132) 82 85 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 85 91 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 91 92 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 92 95 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 95 96 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 96 100 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 100 116 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 116 121 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) fontified t) 121 130 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 130 134 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 134 139 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 139 143 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 143 149 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 149 150 (read-only nil) 150 151 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "133 " swiper-line-number 133) 151 154 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 154 160 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 160 161 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 161 164 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 164 165 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 165 169 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 169 185 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 185 190 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 190 192 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 192 195 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 195 199 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 199 203 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 203 221 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 221 222 (read-only nil) 222 223 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "134 " swiper-line-number 134) 223 226 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 226 232 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 232 233 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 233 236 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 236 237 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 237 241 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 241 252 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 252 255 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 255 257 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 257 261 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 261 280 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 280 281 (read-only nil) 281 282 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "135 " swiper-line-number 135) 282 285 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 285 291 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 291 292 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 292 295 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 295 296 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 296 300 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 300 311 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 311 314 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 314 316 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 316 320 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 320 330 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 330 331 (read-only nil) 331 332 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "136 " swiper-line-number 136) 332 335 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 335 341 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 341 342 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 342 345 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 345 346 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 346 350 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 350 366 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 366 377 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 377 383 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 383 387 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 387 399 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 399 400 (read-only nil) 400 401 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "137 " swiper-line-number 137) 401 404 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 404 410 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 410 411 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 411 414 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 414 415 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 415 419 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 419 430 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 430 433 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 433 435 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 435 439 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 439 451 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 451 452 (read-only nil) 452 453 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "138 " swiper-line-number 138) 453 455 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 455 458 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 458 459 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 459 465 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 465 466 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 466 469 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 469 470 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 470 474 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 474 495 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 495 499 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 499 511 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 511 512 (read-only nil) 512 513 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "139 " swiper-line-number 139) 513 515 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 515 518 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 518 519 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 519 525 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 525 526 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 526 529 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 529 530 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 530 534 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 534 538 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 538 555 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 555 559 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 559 571 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 571 572 (read-only nil) 572 573 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "140 " swiper-line-number 140) 573 576 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 576 582 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 582 583 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 583 586 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 586 587 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 587 590 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 590 591 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 591 602 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 602 605 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 605 621 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 621 622 (read-only nil) 622 623 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "141 " swiper-line-number 141) 623 626 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 626 632 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 632 633 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 633 636 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 636 637 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 637 641 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 641 652 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 652 655 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 655 657 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 657 659 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 659 661 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 661 672 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 672 673 (read-only nil) 673 674 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "142 " swiper-line-number 142) 674 677 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 677 683 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 683 684 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 684 687 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 687 688 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 688 692 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 692 703 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 703 706 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 706 708 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 708 712 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 712 729 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 729 730 (read-only nil) 730 731 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "143 " swiper-line-number 143) 731 732 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 732 734 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 734 740 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 740 741 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 741 744 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 744 745 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 745 749 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 749 760 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 760 763 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 763 783 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 783 784 (read-only nil) 784 785 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "144 " swiper-line-number 144) 785 787 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 787 790 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 790 791 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 791 797 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 797 798 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 798 801 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 801 802 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 802 806 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 806 840 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 840 869 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t)) #("dired" 0 5 (ivy-index 48)) #(" ;; dired config" 0 1 (display "267 " swiper-line-number 267) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 16 (face font-lock-comment-face fontified t)) #("   (evil-yank (point) (point-at-eol)))" 0 1 (display "213 " swiper-line-number 213) 1 38 (fontified t)) #(" (use-package evil-iedit-state" 0 1 (display "453 " swiper-line-number 453) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 30 (face font-lock-constant-face fontified t)) #(" (use-package evil-surround" 0 1 (display "439 " swiper-line-number 439) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 27 (face font-lock-constant-face fontified t)) #("           evil-append" 0 1 (display "612 " swiper-line-number 612) 1 22 (fontified t)) "evilkk" #("loo" 0 3 (ivy-index 0)) #("     (loop for (mode . state) in" 0 1 (display "25  " swiper-line-number 25) 1 32 (fontified t)) #("idii" 0 4 (ivy-index 0)) #("idii
 (provide 'idiig-evil)" 4 5 (read-only nil) 5 6 (swiper-line-number 34 display "34 " mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 6 7 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 7 14 (fontified t face ((:foreground "#ffffea") ivy-current-match font-lock-keyword-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 14 16 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil) 16 20 (fontified t face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 20 26 (fontified t face ((:foreground "#ffffea") ivy-current-match font-lock-constant-face) mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) read-only nil) 26 27 (fontified t mouse-face ivy-minibuffer-match-highlight help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) face ((:foreground "#ffffea") ivy-current-match) read-only nil)) #("occ" 0 3 (ivy-index 1)) #("     (define-key ivy-minibuffer-map (kbd \"C-c o\") 'ivy-occur)" 0 1 (display "39  " swiper-line-number 39) 1 41 (fontified t) 41 48 (face font-lock-string-face fontified t) 48 61 (fontified t)) #("org ref" 0 7 (ivy-index 4)) #(" (use-package org-ref" 0 1 (display "278  " swiper-line-number 278) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 21 (face font-lock-constant-face fontified t)) #("     (setq org-refile-use-outline-path 'file)" 0 1 (display "315  " swiper-line-number 315) 1 6 (fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 45 (fontified t)) #("time" 0 4 (ivy-index 4)) #(" (use-package git-timemachine" 0 1 (display "194 " swiper-line-number 194) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 29 (face font-lock-constant-face fontified t)) #("defun " 0 6 (ivy-index 21)) #(" ;; (defun idiig/mplist-get-values (plist prop)" 0 1 (display "584 " swiper-line-number 584) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 47 (face font-lock-comment-face fontified t)) #(" (defun idiig/stop-using-minibuffer ()" 0 1 (display "99  " swiper-line-number 99) 1 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 35 (face font-lock-function-name-face fontified t) 35 38 (fontified t)) #(" (defun backward-kill-word-or-region (&optional arg)" 0 1 (display "231 " swiper-line-number 231) 1 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 36 (face font-lock-function-name-face fontified t) 36 38 (fontified t) 38 47 (face font-lock-type-face fontified t) 47 52 (fontified t)) #(" (defun idiig//hydra-key-doc-function (key key-width doc doc-width)" 0 1 (display "348 " swiper-line-number 348) 1 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 37 (face font-lock-function-name-face fontified t) 37 67 (fontified t)) #("setr" 0 4 (ivy-index 0)) #("   (evil-leader/setr-key" 0 1 (swiper-line-number 134 display "134 ") 1 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 24 (fontified t)) #(" (use-package evil" 0 1 (display "178 " swiper-line-number 178) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 18 (face font-lock-constant-face fontified t)) #("full" 0 4 (ivy-index 0)) #("       ;; full screen magit-status" 0 1 (display "86 " swiper-line-number 86) 1 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 13 (face font-lock-comment-face fontified t) 13 34 (face font-lock-comment-face fontified t)) #("idiig/se" 0 8 (ivy-index 0)) #("     (idiig/set-leader-keys" 0 1 (swiper-line-number 37 display "37 ") 1 27 (fontified t)) #("     (which-key-declare-prefix \"SPC gf\" \"git-file\")" 0 1 (display "35 " swiper-line-number 35) 1 31 (fontified t) 31 39 (face font-lock-string-face fontified t) 39 40 (fontified t) 40 50 (face font-lock-string-face fontified t) 50 51 (fontified t)) #("confi" 0 5 (ivy-index 0)) #("           (if (configuration-layer/layer-used-p 'ivy)" 0 1 (display "33 " swiper-line-number 33) 1 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 47 (fontified t) 47 54 (fontified t)) "with-editor-mode" #("with-editor-mode" 0 16 (ivy-index 3)) #("       (idiig|hide-lighter with-editor-mode)" 0 1 (display "93 " swiper-line-number 93) 1 7 (fontified t) 7 19 (fontified t) 19 41 (fontified t) 41 44 (fontified t)) "hydra" "hydra" "hydra" "org" #("use package-add" 0 15 (ivy-index 0)) #(" ;; use-package-add-hook for babel" 0 1 (display "340 " swiper-line-number 340) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 34 (face font-lock-comment-face fontified t)) #("flyche" 0 6 (ivy-index 0)) #("     (concat prefix-char \"e\") #'lsp-ui-flycheck-list" 0 1 (swiper-line-number 104 display "104 ") 1 25 (fontified t) 25 28 (fontified t face font-lock-string-face) 28 52 (fontified t))))
(setq counsel-ibuffer-history '(#("     idiig-core.el            426 ELisp/d          ~/.emacs.d/core/idiig-core.el" 0 80 (ivy-index 4 idx 4)) #(" *   idiig-better-ed...      2880 ELisp/d          ~/.emacs.d/core/idiig-better-editor.el" 0 89 (idx 4 ivy-index 4)) #(" *   idiig-project-s...      5148 ELisp/d          ~/.emacs.d/modules/idiig-project-search-management.el" 0 104 (idx 5 ivy-index 5)) #("     *scratch*                144 Lisp Interaction " 0 51 (idx 0 ivy-index 0)) #(" *   *helm-ag*                533 Hmm              " 0 51 (idx 2 ivy-index 2)) #(" *   *scratch*                146 Lisp Interaction " 0 51 (ivy-index 1 idx 1)) #(" *%  *Messages*               375 Messages         " 0 51 (idx 1 ivy-index 1)) #("     *scratch*                145 Lisp Interaction " 0 51 (idx 0 ivy-index 0))))
(setq ivy-history '(#("igno" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/.gitignore" #("dap-mode" 0 8 (ivy-index 2)) #("lsp-mode" 0 8 (ivy-index 1)) #("magit" 0 5 (ivy-index 0)) #("auto-save" 0 9 (ivy-index 1)) #("yasnippet" 0 9 (ivy-index 2)) #("eshell" 0 6 (ivy-index 0)) #("/Users/idiig/.emacs.d/init.el" 0 29 (ivy-index 6)) #("/Users/idiig/.emacs.d/modules/idiig-git.el" 0 42 (ivy-index 4)) #("origin" 0 6 (ivy-index 0)) #("3f79002|my emacs ver.1|Xudong Chen" 0 34 (idx 0 ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-python.el" 0 45 (ivy-index 0)) #("https://github.com/idiig/.emacs.d.git" 0 37 (ivy-index 0)) #("/Users/idiig/.emacs.d/.gitignore" 0 32 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/custom.el" 0 36 (ivy-index 1)) #("/auto-save-list/" 0 16 (ivy-index 1)) #("/.lsp-session-v1" 0 16 (ivy-index 1)) #("/.elpa/" 0 7 (ivy-index 1)) #("/.dap-breakpoints" 0 17 (ivy-index 1)) #("py" 0 2 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py" #("/.cache/" 0 8 (ivy-index 0)) #("/.elpa/projectile-20210503.738/" 0 31 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/idiig-evil.el" 0 40 (ivy-index 2)) #("/.elpa/zetteldeft-20210409.2126/" 0 32 (ivy-index 0)) #("/.elpa/pyim-basedict-20210311.159/" 0 34 (ivy-index 0)) #("/.elpa/pyim-20210428.2307/" 0 26 (ivy-index 0)) #("/.elpa/org-plus-contrib-20210426/" 0 33 (ivy-index 0)) #("/.elpa/noflet-20141102.1454/" 0 28 (ivy-index 0)) #("/.elpa/general-20200516.50/" 0 27 (ivy-index 0)) #("/.elpa/esup-20200814.1400/" 0 26 (ivy-index 0)) #("/.elpa/ccc-20210501.820/" 0 24 (ivy-index 0)) #("/.elpa/benchmark-init-20150905.938/" 0 35 (ivy-index 0)) #("/elpa/" 0 6 (ivy-index 0)) #("/auto-save-list/.saves-59480-Xudongs-MacBook-Air.local~" 0 55 (ivy-index 0)) #("/auto-save-list/.saves-57575-Xudongs-MacBook-Air.local~" 0 55 (ivy-index 0)) #("/auto-save-list/.saves-17515-Xudongs-MacBook-Air.local~" 0 55 (ivy-index 0)) #("/.cache" 0 7 (ivy-index 0)) #("/.cache/*.el" 0 12 (ivy-index 1)) "
.gitignore
idiig-evil.el
*scratch*
*Messages*
*ESS*
.git
idiig
magit: .emacs.d
bookmarks
token_waka.org
gtd.org
notes.org
journal.org
index.org" #("git" 0 3 (ivy-index 0)) ".gitignore" #("evi" 0 3 (ivy-index 0)) #("waka" 0 4 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("linguistics_A" 0 13 (ivy-index 0 idx 0)) #("*Messages*" 0 10 (ivy-index 2)) #("magit: .emacs.d" 0 15 (ivy-index 5)) #("sear" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/core/idiig-better-search.el" "
/Users/idiig/.emacs.d/core/idiig-evil.el
/Users/idiig/.emacs.d/modules/idiig-org.el
/Users/idiig/.emacs.d/modules/idiig-prog.el
/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org
/Users/idiig/.emacs.d/core/custom.el
/Users/idiig/.emacs.d/core/idiig-global-keybindings.el
/Users/idiig/.emacs.d/core/idiig-better-search.el
/Users/idiig/git/spacemacs/layers/+readers/deft/packages.el
/Users/idiig/git/spacemacs/init.el
/Users/idiig/git/spacemacs_config-based-on-zilongshanren-/init.el
/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py
/Users/idiig/Nutstore/org-notes/notes.org
/Users/idiig/Nutstore/org-notes/gtd.org
/Users/idiig/.emacs.d/init.el" #("ev" 0 2 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-org.el" 0 42 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("prog" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-prog.el" #("init" 0 4 (ivy-index 2)) "/Users/idiig/git/spacemacs/init.el" #("/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" 0 61 (ivy-index 1)) "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py" #("pro" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-prog.el" "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py" "/Users/idiig/.emacs.d/modules/idiig-prog.el" "/Users/idiig/.emacs.d/modules/idiig-prog.el" #("key" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/core/idiig-global-keybindings.el" #("sea" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/core/idiig-better-search.el" #("org" 0 3 (ivy-index 2)) #("idiig org" 0 9 (ivy-index 6)) #("evil" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/core/idiig-global-keybindings.el" "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py" #("token_waka.org" 0 14 (ivy-index 1)) "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/preprocessing.py" #("/Users/idiig/.emacs.d/modules/idiig-japanese.el" 0 47 (ivy-index 1)) "/Users/idiig/emacs-test/s.org" #("/Users/idiig/.emacs.d/core/idiig-better-default.el" 0 50 (ivy-index 0)) #("idiig" 0 5 (ivy-index 10)) "/Users/idiig/.emacs.d/modules/idiig-prog.el" #("ess" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-ess.el" #("s.org" 0 5 (ivy-index 1)) "/Users/idiig/emacs-test/s.org" #("idiig-or" 0 8 (ivy-index 0)) #("ini" 0 3 (ivy-index 0)) #("1a253f8|customized some automatic saved file path|Xudong Chen" 0 61 (ivy-index 0 idx 0)) #("japa" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-ess.el" #("better" 0 6 (ivy-index 1)) #("/Users/idiig/.emacs.d/core/idiig-global-keybindings.el" 0 54 (ivy-index 5)) #("multiple-cursors" 0 16 (ivy-index 1)) #("/Users/idiig/.emacs.d/modules/idiig-prog.el" 0 43 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-ess.el" #("me" 0 2 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/idiig-better-search.el" 0 49 (ivy-index 6)) "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py" #("9f84034|modified magit, multi cursor, evil; modified structure|Xudong Chen" 0 74 (ivy-index 0 idx 0)) #("/Users/idiig/.emacs.d/modules/idiig-ess.el" 0 42 (ivy-index 0))))
(setq counsel-M-x-history '(#("customize-group" 0 15 (ivy-index 1)) #("cust gr" 0 7 (ivy-index 0)) #("package-autoremove" 0 18 (ivy-index 0)) #("auto re" 0 7 (ivy-index 1)) #("def" 0 3 (ivy-index 0)) "deft" #("magit" 0 5 (ivy-index 0)) #("deft" 0 4 (ivy-index 0)) #("ignore gi" 0 9 (ivy-index 2)) "magit-gitignore" #("org" 0 3 (ivy-index 7)) "org-yank" #("bench" 0 5 (ivy-index 4)) "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" #("benc" 0 4 (ivy-index 4)) "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark" "benchmark-init/show-durations-tree" #("esu" 0 3 (ivy-index 0)) #("esup" 0 4 (ivy-index 3)) "esup-mode" "esup-visit-item" "esup-display-results" #("ben" 0 3 (ivy-index 5)) "benchmark-init/show-durations-tabulated" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" #("tree be" 0 7 (ivy-index 0)) #("benchmark-init/show-durations-tree" 0 34 (ivy-index 0)) #("package-li" 0 10 (ivy-index 1)) "package-list-packages" #("package ins" 0 11 (ivy-index 0)) "package-install" #("autore" 0 6 (ivy-index 0)) #("customize grou" 0 14 (ivy-index 0)) #("avy" 0 3 (ivy-index 7)) "avy-goto-line" #("customize fa" 0 12 (ivy-index 0)) "customize-face" #("customize group" 0 15 (ivy-index 0)) #("ma merge" 0 8 (ivy-index 0)) "magit-merge" #("eval" 0 4 (ivy-index 2)) #("eval-buffer" 0 11 (ivy-index 0)) #("eval b" 0 6 (ivy-index 0)) "magit-diff" #("lsp" 0 3 (ivy-index 0)) #("lsp-mode" 0 8 (ivy-index 0)) #("restart" 0 7 (ivy-index 5)) "lsp-workspace-restart" #("ls" 0 2 (ivy-index 0)) #("cus fac" 0 7 (ivy-index 0)) "customize-face" #("customize-face" 0 14 (ivy-index 0)) #("custo f" 0 7 (ivy-index 0)) #("week" 0 4 (ivy-index 3)) "org-agenda-week-view" #("esh" 0 3 (ivy-index 0)) "eshell" #("flymake-diagnostic-at-point-mode" 0 32 (ivy-index 0)) #("fly make at" 0 11 (ivy-index 0)) #("flymake-posframe-mode" 0 21 (ivy-index 0)) #("posfra" 0 6 (ivy-index 2)) #("flymake d" 0 9 (ivy-index 8)) "flymake-diagnostics-buffer-mode" #("flymake " 0 8 (ivy-index 4)) #("evil-l" 0 6 (ivy-index 2)) "evil-local-mode" #("evil lea" 0 8 (ivy-index 1)) "evil-send-leader" #("org note" 0 8 (ivy-index 0)) "org-add-note" #("pomo" 0 4 (ivy-index 0)) "org-pomodoro" #("org prop" 0 8 (ivy-index 1)) "org-set-property" "org-set-property-and-value" #("customi" 0 7 (ivy-index 1)) #("face mi" 0 7 (ivy-index 0))))
(setq evil-ex-history '(#("%s/\"SPC/\"C-SPC" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("%s/define-key dir/evil-define-key 'normal dir" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("%s/green/red" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("%s/\"SPC /," 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("%s/\"m/\"SPC m" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("%s/idiig\\/.+-for-mode/which-key-declare-prefixes" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48)) #("%s/idiig\\/dec/ssss" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/idiig.+for-mode/which-key-declare-prefixes " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46)) #("%s/which-key-/idiig\\/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("%s/evil-leader\\/set-key-for-mode/idiig\\/set-leader-keys-for-minor-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56) 56 57 (ex-index 57) 57 58 (ex-index 58) 58 59 (ex-index 59) 59 60 (ex-index 60) 60 61 (ex-index 61) 61 62 (ex-index 62) 62 63 (ex-index 63) 63 64 (ex-index 64) 64 65 (ex-index 65) 65 66 (ex-index 66) 66 67 (ex-index 67) 67 68 (ex-index 68) 68 69 (ex-index 69) 69 70 (ex-index 70)) #("%s/)/\"" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("%s/(/,\"" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("%s/\\//," 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("%s/-test/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("%s/spacemacs\\/python/pytest" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("%s/\\n/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("（" 0 1 (ex-index 1)) #("%s/spacemacs/idiig" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/spacemacs/ifiig" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/defvar/s" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("'<,'>" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5))))
(setq buffer-name-history '("*scratch*" "all_7.csv"))
(setq file-name-history '(#("/Users/idiig/.emacs.d/" 0 22 (ivy-index 0)) #("/Users/idiig/.emacs.d/.gitignore" 0 32 (ivy-index 0)) #("/Users/idiig/.emacs.d/.git/" 0 27 (ivy-index 2)) #("/Users/idiig/.gitignore" 0 23 (ivy-index 0)) #("/Users/idiig/.emacs.d/.git/.gitignore" 0 37 (ivy-index 0)) #("/Users/idiig/" 0 13 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/" 0 27 (ivy-index 0)) #("/Users/idiig/git/spacemacs/init.el" 0 34 (ivy-index 10)) #("/Users/idiig/git/spacemacs_config-based-on-zilongshanren-/" 0 58 (ivy-index 1)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py" 0 62 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/" 0 30 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/idiig-evil.el" 0 40 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/" 0 53 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/" 0 47 (ivy-index 0)) #("/Users/idiig/.emacs.d/.cache/" 0 29 (ivy-index 6)) #("/Users/idiig/.emacs.d/modules/idiig-git.el" 0 42 (ivy-index 0)) #("/Users/idiig/emacs-test/" 0 24 (ivy-index 0)) #("/Users/idiig/Downloads/log" 0 26 (ivy-index 0)) #("/Users/idiig/Downloads/plan9.itermcolors" 0 40 (ivy-index 0)) #("/Users/idiig/Downloads/pencil-light.itermcolors" 0 47 (ivy-index 0)) #("/Users/idiig/emacs-test/test.el" 0 31 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/gtd.org" 0 39 (ivy-index 2)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/kaekotoba.csv" 0 66 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/kakekotoba.txt" 0 67 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/engo.txt" 0 61 (ivy-index 0)) #("/Users/idiig/Nutstore/works/" 0 28 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/preprocessing.py" 0 69 (ivy-index 0)) #("/Users/idiig/emacs-test/test.org" 0 32 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-python.el" 0 45 (ivy-index 6)) #("/Users/idiig/.emacs.d/modules/idiig-org.el" 0 42 (ivy-index 4)) #("/Users/idiig/.emacs.d/modules/idiig-evil-evilified-state.el" 0 59 (ivy-index 0)) #("/Users/idiig/.emacs.d/init.el" 0 29 (ivy-index 8)) #("/Users/idiig/.emacs.d/eshell/" 0 29 (ivy-index 8)) #("/Users/idiig/.emacs.d/core/.DS_Store" 0 36 (ivy-index 4)) #("/Users/idiig/.emacs.d/core/idiig-ui.el" 0 38 (ivy-index 4)) "~/.emacs.d/modules/idiig-better-search.el" #("/Users/idiig/.emacs.d/modules/idiig-ess.el" 0 42 (ivy-index 0)) #("/Users/idiig/emacs-test/s.r" 0 27 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-r.el" 0 40 (ivy-index 2)) #("/Users/idiig/emacs-test/s.org" 0 29 (ivy-index 0)) #("/Users/idiig/emacs-test/s.py" 0 28 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-prog.el" 0 43 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/draft.txt" 0 56 (ivy-index 3)) #("/Users/idiig/Nutstore/works/on_work/token_waka/test.tex" 0 55 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.pdf" 0 61 (ivy-index 3)) #("/Users/idiig/Downloads/" 0 23 (ivy-index 0)) #("/Users/idiig/Downloads/文本-F3F46926A5D2-1.txt" 0 44 (ivy-index 6)) #("/Users/idiig/Downloads/test.org" 0 31 (ivy-index 0)) #("/Users/idiig/Downloads/#test.org#" 0 33 (ivy-index 4)) #("/Users/idiig/emacstest/test.bib" 0 31 (ivy-index 0)) #("/Users/idiig/emacstest/chicago.bst" 0 34 (ivy-index 0)) #("/Users/idiig/emacstest/agsm.bst" 0 31 (ivy-index 0)) #("/Users/idiig/emacstest/org.log" 0 30 (ivy-index 3)) #("/Users/idiig/emacstest/unified.bst" 0 34 (ivy-index 0)) #("/Users/idiig/emacstest/" 0 23 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-tex.el" 0 42 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_31_11.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_23_21.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_16_29.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_14_29.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_5_1.txt" 0 41 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_4_09.txt" 0 42 (ivy-index 0)) #("/Users/idiig/test_2.csv" 0 23 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-auto-complete.el" 0 52 (ivy-index 4)) #("/Users/idiig/Nutstore/zemi/20201225/test.tex" 0 44 (ivy-index 0)) #("/Users/idiig/Nutstore/zemi/20201225/" 0 36 (ivy-index 0)) #("/Users/idiig/Nutstore/zemi/20201225/ibm_model_note.org" 0 54 (ivy-index 0)) #("/Users/idiig/emacstest/org.org" 0 30 (ivy-index 0)) "
./
../
idiig-ui.el
custom.el
.DS_Store
idiig-packages.el
idiig-core-funcのコピー.el
idiig-better-default.el
idiig-global-keybindings.el
idiig-global-keybindingsのコピー.el" #("/Users/idiig/.emacs.d/modules/idiig-evil.el" 0 43 (ivy-index 3)) #("/Users/idiig/.emacs.d/core/idiig-better-default.el" 0 50 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/idiig-core-func.el" 0 45 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/idiig-core.el" 0 40 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-project-search-management.el" 0 64 (ivy-index 7)) "~/.emacs.d/modules/idiig-evil.el" "~/.emacs.d/modules/idiig-project-search-management.el" "~/.emacs.d/init.el" "~/.emacs.d/modules/idiig-auto-complete.el" "~/.emacs.d/modules/idiig-auto-completeのコピー.el" "~/.emacs.d/core/" "~/.emacs.d/modules/idiig-parens-config.el" "~/.emacs.d/core/idiig-better-editor.el" "~/.emacs.d/core/idiig-packages.el" "~/.emacs.d/core/idiig-global-keybindings.el" "~/.emacs.d/core/idiig-editor.el" "~/.emacs.d/core/idiig-ui.el" "~/.emacs.d/custom.el" "~/.emacs.d/core/idiig-custom.el"))
(setq extended-command-history '("evil-surround-change" "recentf-open-files" "company-quickhelp-manual-begin" "company-mode" "kill-buffer" "company-mode" "idiig/auto-completion-key-sequence-end" "auto-complete" "autoconf-mode" "auto-complete" "company-complete" "company-quickhelp-mode" "company-select-next" "company-quickhelp-mode" "eval-buffer"))
(setq evil-jumps-history '((31 "/Users/idiig/.emacs.d/modules/idiig-python.el") (6949 "/Users/idiig/.emacs.d/core/idiig-evil.el") (1 "/Users/idiig/.gitignore") (2654 "/Users/idiig/.emacs.d/core/idiig-evil.el") (2654 "/Users/idiig/.emacs.d/core/idiig-evil.el") (1724 "/Users/idiig/Nutstore/org-notes/gtd.org") (2293 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (6876 "/Users/idiig/.emacs.d/core/idiig-evil.el") (3819 "/Users/idiig/.emacs.d/modules/idiig-git.el") (3819 "/Users/idiig/.emacs.d/modules/idiig-git.el") (3173 "/Users/idiig/.emacs.d/modules/idiig-git.el") (2946 "/Users/idiig/.emacs.d/core/idiig-better-search.el") (3226 "/Users/idiig/.emacs.d/modules/idiig-git.el") (6972 "/Users/idiig/.emacs.d/core/idiig-evil.el") (6969 "/Users/idiig/.emacs.d/core/idiig-evil.el") (4858 "/Users/idiig/.emacs.d/modules/idiig-git.el") (5805 "/Users/idiig/.emacs.d/modules/idiig-org.el") (2293 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (5805 "/Users/idiig/.emacs.d/modules/idiig-org.el") (6152 "/Users/idiig/.emacs.d/modules/idiig-org.el") (1 "/Users/idiig/.emacs.d/modules/idiig-org.el") (10040 "/Users/idiig/.emacs.d/modules/idiig-org.el") (2293 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (10040 "/Users/idiig/.emacs.d/modules/idiig-org.el") (9806 "/Users/idiig/.emacs.d/modules/idiig-org.el") (1 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4901 "/Users/idiig/.emacs.d/modules/idiig-org.el") (20639 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7301 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (20639 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4430 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4479 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4528 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4607 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4657 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4716 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4770 "/Users/idiig/.emacs.d/modules/idiig-org.el") (20030 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7301 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (31861 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7301 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (31861 "/Users/idiig/.emacs.d/modules/idiig-org.el") (29351 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7005 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (29347 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7226 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (32991 "/Users/idiig/.emacs.d/modules/idiig-org.el") (24966 "/Users/idiig/.emacs.d/modules/idiig-org.el") (25004 "/Users/idiig/.emacs.d/modules/idiig-org.el") (19024 "/Users/idiig/.emacs.d/modules/idiig-org.el") (31407 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7226 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (23178 "/Users/idiig/.emacs.d/modules/idiig-org.el") (22186 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4826 "/Users/idiig/.emacs.d/modules/idiig-org.el") (5235 "/Users/idiig/.emacs.d/modules/idiig-org.el") (4812 "/Users/idiig/.emacs.d/modules/idiig-org.el") (3978 "/Users/idiig/.emacs.d/modules/idiig-prog.el") (13302 "/Users/idiig/.emacs.d/modules/idiig-prog.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (4804 "/Users/idiig/.emacs.d/modules/idiig-org.el") (27698 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (27698 "/Users/idiig/.emacs.d/modules/idiig-org.el") (27698 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (5285 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (5285 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (5285 "/Users/idiig/.emacs.d/modules/idiig-org.el") (8349 "/Users/idiig/.emacs.d/modules/idiig-org.el") (12231 "/Users/idiig/.emacs.d/modules/idiig-org.el") (5003 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (5003 "/Users/idiig/.emacs.d/modules/idiig-org.el") (12088 "/Users/idiig/.emacs.d/modules/idiig-org.el") (5301 "/Users/idiig/.emacs.d/modules/idiig-org.el") (12291 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (12088 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (12088 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (12088 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (12562 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (12088 "/Users/idiig/.emacs.d/modules/idiig-org.el") (9228 "/Users/idiig/.emacs.d/modules/idiig-org.el") (7308 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (1100 "/Users/idiig/git/spacemacs/layers/+readers/deft/packages.el") (9228 "/Users/idiig/.emacs.d/modules/idiig-org.el") (1100 "/Users/idiig/git/spacemacs/layers/+readers/deft/packages.el") (9174 "/Users/idiig/.emacs.d/modules/idiig-org.el") (17670 "/Users/idiig/.emacs.d/modules/idiig-org.el") (3885 "/Users/idiig/git/spacemacs/layers/+readers/deft/packages.el") (17670 "/Users/idiig/.emacs.d/modules/idiig-org.el") (3366 "/Users/idiig/git/spacemacs/layers/+readers/deft/packages.el")))
(setq search-ring '(#("avy" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("transient-state" 0 15 (isearch-case-fold-search t isearch-regexp-function nil)) #("idiig-packages/packages" 0 23 (isearch-case-fold-search t isearch-regexp-function nil)) #("auto-completion-complete-with-key-sequence" 0 42 (isearch-case-fold-search t isearch-regexp-function nil)) #(")" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #(": )" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("company-complete-common-or-cycle" 0 32 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '("file" "wgre" "evil" "ze" #("emph" 0 4 (isearch-case-fold-search nil)) "export" "which" "ag" "deft" "\\(deft\\).*?\\(dir\\)" #("token_content" 0 13 (isearch-case-fold-search nil)) "babel" "ja" "japa" "don" #("\"SPC" 0 4 (isearch-case-fold-search t))))
