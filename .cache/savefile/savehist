;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-table-formula-history transient--history TeX-macro-history LaTeX-environment-history bibtex-entry-type-history magit-revision-history xref--read-pattern-history counsel-describe-symbol-history face-name-history org-agenda-search-history org-refile-history org-read-date-history ess--completing-hist counsel-imenu-history imenu--history-list pyvenv-workon-history counsel-apropos-history tmm--history TeX-command-history dired-shell-command-history info-lookup-history read-char-history bibtex-key-history org-link--history shell-command-history tex-compile-history org-tags-history read-number-history empty-history helm-grep-ag-history helm-ag--helm-history helm-ag--command-history woman-topic-history regexp-history yes-or-no-p-history minibuffer-history swiper-history counsel-ibuffer-history ivy-history counsel-M-x-history input-method-history evil-ex-history buffer-name-history file-name-history extended-command-history))
(setq magit-revision-history '(#("master" 0 6 (ivy-index 0)) #("https://github.com/idiig/token-waka-1.git" 0 41 (ivy-index 0)) #("https://github.com/idiig/token-waka-1.git]" 0 42 (ivy-index 0)) #("origin/master" 0 13 (ivy-index 0)) #("HEAD" 0 4 (ivy-index 2)) #("https://github.com/idiig/org-notes.git" 0 38 (ivy-index 0))))
(setq counsel-describe-symbol-history '(#("resize mini" 0 11 (ivy-index 1)) "resize-mini-windows"))
(setq face-name-history '("org-document-title" "lsp-face-highlight-write" "org-agenda-date-today" "org-document-title" "org-level-1" "minibuffer-prompt" "org-level-2" "org-agenda-date-weekend" "org-agenda-date" "org-agenda-structure" "org-agenda-date-today" "org-agenda-structure"))
(setq org-refile-history '(#("journal.org/" 0 12 (idx 5 ivy-index 6)) "notes.org/" "notes.org/" #("notes.org/" 0 10 (idx 3 ivy-index 4)) "journal.org/2021/2021-05 May/2021-05-07 Friday/" #("journal.org/2021/2021-05 May/2021-05-07 Friday/" 0 47 (ivy-index 2 idx 51)) "gtd.org/Workspace/" "gtd.org/Workspace/" #("gtd.org/Workspace/" 0 18 (ivy-index 2 idx 1)) #("gtd.org/Workspace/にほんごスペース/" 0 27 (ivy-index 1 idx 23)) "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" "journal.org/2021/2021-05 May/2021-05-05 Wednesday/" #("journal.org/2021/2021-05 May/2021-05-05 Wednesday/" 0 50 (idx 0 ivy-index 1)) #("gtd.org/Work/" 0 13 (idx 7 ivy-index 0))))
(setq org-read-date-history '("2:30    " "2:00    " "15:00    " " .+3d/4d    " " .+3d    " "15:00    " "14:00+9    " "13:00    " "12:00    " "19:00    " "    " "13:00    " "14:00+9    " "12:00    " "7:00    " "   " "+2    " "22:00    " "10:00    " "22:00    " "10:20+2    " "19:40+1    " "14:00+9    " "14:00+1    " "18:00    " "14:00+14    " "14:00-20:00    " "20:00    " "   " " .+1d/2d    " "24:00 .+1d/3d    " "19:00    " "1:30-2:00    " "23:00    " "15:00    " "22:00    " "14:00-18:00    " "24:00    " "23:00    " "   " "2021-4-1 12:00    " " 2021-4-30 8:50 + 7d    " "   " "04-29    " "   "))
(setq imenu--history-list '(#("Module" 0 6 (ivy-index 1 idx 0)) #("Variable" 0 8 (ivy-index 2 idx 2))))
(setq pyvenv-workon-history '(#("py38" 0 4 (ivy-index 1))))
(setq tmm--history '("r==>Revert Buffer              s-u" "q==>Quit                   C-x C-c" "p==>Print" "1==>New Frame on Monitor..." "F==>New Frame on Display..." "f==>New Frame              C-x 5 2" "0==>Remove Other Windows     C-x 1" "N==>New Window on Right      C-x 3" "n==>New Window Below         C-x 2" "R==>Recover Crashed Session" "r==>Revert Buffer              s-u" "S==>Save As...             C-x C-w" "s==>Save                   C-x C-s" "c==>Close                C-SPC b d" "i==>Insert File...           C-x i" "d==>Open Directory...        C-x d" "O==>Open File..." "o==>Open Recent" "v==>Visit New File...      C-x C-f"))
(setq TeX-command-history '(#("LaTeX" 0 5 (idx 0 ivy-index 0)) #("Ps2pdf" 0 6 (ivy-index 14 idx 14)) #("Clean All" 0 9 (ivy-index 18 idx 18)) #("Dvipdfmx" 0 8 (ivy-index 16 idx 16))))
(setq read-char-history '("r"))
(setq tex-compile-history '(#("bibtex --min-crossref=100 test" 0 30 (ivy-index 15 idx 15)) #("xetex \\\\nonstopmode\\\\input test.tex" 0 35 (ivy-index 1 idx 1)) #("\\doc-view \"test.pdf\"" 0 20 (ivy-index 13 idx 13))))
(setq org-tags-history '(#("test" 0 4 (ivy-index 0)) #("网课" 0 2 (ivy-index 0)) #("TA" 0 2 (ivy-index 0)) #("q" 0 1 (ivy-index 0))))
(setq helm-ag--helm-history '(":any" "C-M-" "image" "org babel def" "contain" "yasnippet-" "orb" "multi" "retr" "chrom" "roam-note" "org-files" "org-notes" "roam" "auctex-latexmk-" "latex build" "set leader keys for ma" "set-key-for" "org journal map" "z deft" "org journal" "org roam" "declare" "dec" "declare" "evil-set ini" "dired norma" "evil-leader/set-key-for-mode" "major mode leader" "deft" "transient" "use helm" "winum" "multiple" "declare" "declare SPC" "declare  SPC" "declare SPC" "with" "dired" "cache" "transie" "pyim" "my git" "org clock" "counsel git" "avy" "color green" "which ke" "defh" "golden" "def hy" "global set" "org clock" "lambda in" "which key dec" "idiig/declare-prefix-for-mode" "idiig//lsp-declare-prefixes-for-mode" "evil-leader/set-key-for" "evil-leader/set-key-for-mode" "set key for" "あと" "oCc" "C org cap" "active pro" "bind map" "quelp" "quelpa" "quel" "define key map" "counsel git" "normal" "dired" "eviln" "dired" "hook" "evilnc" "dired" "evil-org-agenda" "evil state" "mode map" ":bind" "evil map" #("evilified-state-evilify-map" 0 27 (fontified t)) "evil state" "occur mode ma" "state evili" "evilified" "declare" "evil-leader/set-key-for-mode" "rainbow " "company box" "idiig" "wgrep" "wgre" "occur" "evil surr" "idiig" "doom-modeline-segment--matches" "normal  state"))
(setq helm-ag--command-history '("spacemacs/helm-file-do-ag" "defun" "idiig" "exec-path" "idiig" "\"ag\"" "ag" "sss" "ag" "manage" "idiig" "e"))
(setq regexp-history '(#("usepackage{url}" 0 2 (fontified t face font-lock-string-face) 2 14 (fontified t face font-lock-string-face) 14 15 (fontified t rear-nonsticky t face font-lock-string-face)) #("setCJKsansfont{SourceHanSansJP-Regular}" 0 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 38 (fontified t face font-lock-string-face) 38 39 (rear-nonsticky t fontified t face font-lock-string-face)) nil nil #("-fr" 0 3 (face font-lock-string-face fontified t)) #(":defer" 0 6 (face font-lock-builtin-face fontified t)) nil nil #("ivy-resume" 0 10 (fontified t)) nil nil #("org-agenda-mode-map" 0 19 (fontified t)) "emacs" #("dotspacemacs-leader-key" 0 23 (face font-lock-variable-name-face fontified t)) "spacemacs" #("org-clock-jump-to-current-clock" 0 30 (fontified t) 30 31 (rear-nonsticky t fontified t)) "idiig" nil nil nil nil nil nil "idiig" #("modules/idiig-org" 0 17 (read-only t rear-nonsticky t front-sticky t face font-lock-function-name-face intangible t)) #("idiig/org-setup-evil-surround" 0 29 (fontified t face font-lock-function-name-face)) nil "evil" nil "win" nil "\\+RESULTS" "\\+RESULTS" "\\+RESULTS" "\\+RESULTS" #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("idiig-r" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" dired-filename t mouse-face highlight)) #("spac" 0 4 (ivy-index 0)) "spac" "PPMI" "mathbf" "mathbf" nil nil nil nil "bibliography{test\\.bib}" "bib" "bib" nil #("org-latex-compiler" 0 18 (face font-lock-comment-face fontified t)) "(with-eval-after-load \"ox-latex\"
  (add-to-list 'org-latex-classes
               '(\"bxjsarticle\"
                 \"
\\\\documentclass[xelatex,dvi=dvipdfmx,11pt,ja=standard]{bxjsarticle}
\\\\usepackage{amsmath}
\\\\usepackage{graphicx}
\\\\usepackage[T1]{fontenc}
\\\\usepackage{geometry}
\\\\geometry{a4paper,left=20mm,right=20mm,top=8mm,bottom=12mm,heightrounded}
\\\\usepackage{subcaption}
\\\\usepackage{otf}
\\\\usepackage[yyyymmdd]{datetime}
\\\\renewcommand{\\\\dateseparator}{/}
\\\\usepackage{longtable}
\\\\usepackage{float}
\\\\usepackage{wrapfig}
\\\\usepackage{rotating}
\\\\usepackage[normalem]{ulem}
\\\\usepackage{textcomp}
\\\\usepackage{multicol}
\\\\usepackage{marvosym}
\\\\usepackage{wasysym}
\\\\usepackage{amssymb}
\\\\usepackage{booktabs}
\\\\tolerance=1000
\\\\usepackage{xcolor}
\\\\usepackage{hyperref}
\\\\ifdefined\\\\kanjiskip
  \\\\usepackage{pxjahyper}
  \\\\hypersetup{colorlinks=true,citecolor=blue}
\\\\else
  \\\\ifdefined\\\\XeTeXversion
      \\\\hypersetup{colorlinks=true,citecolor=blue}
  \\\\else
    \\\\ifdefined\\\\directlua
      \\\\hypersetup{pdfencoding=auto,colorlinks=true,citecolor=blue}
    \\\\else
      \\\\hypersetup{unicode,colorlinks=true,citecolor=blue}
    \\\\fi
  \\\\fi
\\\\fi
%
\\\\usepackage{tikz}
\\\\usepackage[authoryear]{natbib}
\\\\bibpunct[: ]{(}{)}{,}{a}{}{,}
\\\\usepackage{url}
%
\\\\usepackage{listings}
\\\\lstset{
basicstyle=\\\\small\\\\ttfamily,
numbers=left,
numberstyle=\\\\footnotesize,
stepnumber=1,
numbersep=5pt,
backgroundcolor=\\\\color{white},
showspaces=false,
showstringspaces=false,
showtabs=false,
frame=tb,
tabsize=2,
captionpos=b,
breaklines=true,
breakatwhitespace=false,
escapeinside={\\\\%*}{*)} 
}
%
\\\\usepackage{etoolbox}
\\\\makeatletter
\\\\patchcmd{\\\\@verbatim}
  {\\\\verbatim@font}
  {\\\\verbatim@font\\\\small}
  {}{}
\\\\makeatother
%
% Footnote setting
\\\\usepackage{footmisc}
\\\\DefineFNsymbols{mySymbols}{{\\\\ensuremath\\\\dagger}{\\\\ensuremath\\\\ddagger}\\\\S\\\\P
   *{**}{\\\\ensuremath{\\\\dagger\\\\dagger}}{\\\\ensuremath{\\\\ddagger\\\\ddagger}}}
\\\\setfnsymbol{mySymbols}
\\\\renewcommand{\\\\thefootnote}{\\\\arabic{footnote}\\\\enspace}
%
\\\\usepackage{fancyhdr}
\\\\pagestyle{fancyplain}
\\\\fancyhf{}
\\\\chead{\\\\fancyplain{}{\\\\jobname}}
\\\\lhead{\\\\fancyplain{}{\\\\today\\\\enspace\\\\currenttime}}
\\\\rhead{\\\\fancyplain{}{\\\\includegraphics[width=0.2\\\\textwidth]{/Users/idiig/Nutstore/tex_related/tokyotechmark.eps}}}
\\\\cfoot{\\\\fancyplain{}{\\\\thepage}}
%
\\\\usepackage{caption}
\\\\captionsetup[figure]{labelfont={bf}, labelsep=colon, justification=raggedright, format=hang}
\\\\captionsetup[table]{labelfont={bf}, labelsep=colon, justification=raggedright, format=hang}
%
\\\\usepackage{framed}
\\\\renewenvironment{quote}[1][\\\\hsize]
{%
  \\\\def\\\\FrameCommand
  {%
    {\\\\color{gray}\\\\vrule width 4pt}%
    \\\\hspace{0pt}%must no space.
    \\\\fboxsep=\\\\FrameSep\\\\colorbox{white}%
  }%
  \\\\MakeFramed{\\\\hsize#1\\\\advance\\\\hsize-\\\\width\\\\FrameRestore}%
}
{\\\\endMakeFramed}
%
\\\\makeatletter
\\\\renewcommand{\\\\maketitle}{\\\\bgroup\\\\setlength{\\\\parindent}{0pt}
\\\\begin{flushleft}
  \\\\ \\\\\\\\
  \\\\vspace{-0.5em}
  \\\\Large{\\\\textsf{\\\\@title}}\\\\\\\\
  \\\\normalsize\\\\@author
\\\\end{flushleft}\\\\egroup
\\\\vspace{-1em}
}
\\\\makeatother
\"
                 (\"\\\\section{%s}\" . \"\\\\section*{%s}\")
                 (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")
                 (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")
                 (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")
                 (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))))" "d-to-" nil nil #("idiig-core" 0 10 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t)) #("C-r" 0 3 (face font-lock-string-face fontified t)) nil #("spacemacs" 0 9 (ivy-index 3)) nil "sa" #("ve" 0 2 (ivy-index 0)) #("defvar" 0 6 (face font-lock-keyword-face fontified t)) #("defvar" 0 6 (face font-lock-keyword-face fontified t)) #("1" 0 1 (face underline read-only t)) #("aluation" 0 8 (help-echo "mouse-1: call ivy-action" mouse-face highlight face font-lock-comment-face fontified t)) #("ve" 0 2 (ivy-index 6)) "ve" "ev" #("To" 0 2 (face font-lock-comment-face fontified t)) #("To" 0 2 (face font-lock-comment-face fontified t)) #("To" 0 2 (fontified t face font-lock-comment-face)) #("To" 0 2 (face font-lock-comment-face fontified t)) #("create" 0 6 (face font-lock-comment-face fontified t)) #("create" 0 6 (face font-lock-comment-face fontified t)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("enter" 0 5 (fontified t face font-lock-comment-face)) #("create" 0 6 (fontified t face font-lock-comment-face)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("create" 0 6 (fontified t face font-lock-comment-face)) nil #("is" 0 2 (face font-lock-comment-face fontified t)) #("is" 0 2 (face font-lock-comment-face fontified t)) #("buffer" 0 6 (fontified t face font-lock-comment-face)) #("This" 0 4 (face font-lock-comment-face fontified t)) #("use-package" 0 8 (fontified t face font-lock-keyword-face) 8 11 (fontified t face font-lock-keyword-face)) #("use-package" 0 8 (fontified t face font-lock-keyword-face) 8 11 (fontified t face font-lock-keyword-face)) nil #("evil-leader/set-key" 0 19 (fontified t)) #("global-set-key" 0 14 (fontified t)) #("global-set-key" 0 14 (fontified t)) nil #("global-set-key" 0 14 (fontified t)) "global-set-key" "global" #("iedit" 0 5 (fontified t face font-lock-constant-face)) nil #("ivy" 0 3 (fontified t face font-lock-comment-face)) #("To" 0 2 (fontified t face font-lock-comment-face)) "e" #("map" 0 3 (fontified t face font-lock-comment-face)) "e" nil "glo" "thing" nil "re" "r" nil "t"))
(setq yes-or-no-p-history '("yes" "yeas" "yes" "tes" "yes" "tes" "yes" "no" "yes"))
(setq minibuffer-history '("yamamoto 2021" "label:ex.2" "q" "hey" "label:fig:token-based-ex" "label:fig:type-base-ex" "latex" "sc" "BE" #("yamamoto_hachidaishu_2010" 0 24 (fontified t help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:yamamoto_hachidaishu_2010") org-category "draft" face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 24 25 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:yamamoto_hachidaishu_2010") org-category "draft" face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t)) "2010" "4" "30" "latex" "\\" "printbibliography:token_waka.bib" #("yasuoka_koten_2018" 0 17 (font-lock-multiline t htmlize-link (:uri "citep:yasuoka_koten_2018") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 17 18 (font-lock-multiline t htmlize-link (:uri "citep:yasuoka_koten_2018") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) "5x2" "emacs-lisp" "\\" "latex" "R" "python" "R" "10" "i" "idiig" "test 3" "test 2" "test" #("yasuoka_koten_2018" 0 17 (font-lock-multiline t htmlize-link (:uri "citep:yasuoka_koten_2018") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 17 18 (font-lock-multiline t htmlize-link (:uri "citep:yasuoka_koten_2018") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) "test" #("yasuoka_koten_2018" 0 17 (fontified t face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:yasuoka_koten_2018") font-lock-multiline t) 17 18 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:yasuoka_koten_2018") font-lock-multiline t)) #("rudzka-ostyn_cognitive_1988" 0 19 (fontified t help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:rudzka-ostyn_cognitive_1988") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 19 26 (fontified t help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:rudzka-ostyn_cognitive_1988") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 26 27 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:rudzka-ostyn_cognitive_1988") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t)) "no" #("rudzka-ostyn_cognitive_1988" 0 26 (font-lock-multiline t htmlize-link (:uri "citep:rudzka-ostyn_cognitive_1988") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face fontified t) 26 27 (font-lock-multiline t htmlize-link (:uri "citep:rudzka-ostyn_cognitive_1988") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) #("heylen_looking_2012" 0 19 (font-lock-multiline t htmlize-link (:uri "citep:schutze_automatic_1998,heylen_looking_2012,heylen_monitoring_2015") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face org-category "token_waka" fontified t)) "3" #("heylen_looking_2012" 0 19 (fontified t org-category "token_waka" face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:schutze_automatic_1998,heylen_looking_2012,heylen_monitoring_2015") font-lock-multiline t)) #("yamamoto_utakotoba_2006" 0 23 (fontified t org-category "token_waka" face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:yamamoto_utakotoba_2006,yamamoto_modeling_2007,yamamoto_hachidaishu_2010") font-lock-multiline t)) "no" #("schutze_automatic_1998" 0 22 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:schutze_automatic_1998,heylen_looking_2012,heylen_monitoring_2015") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t)) "no" "gtd" "test" "no" #("baroni_dont_2014" 0 16 (fontified t org-category "token_waka" invisible full face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "Citep:baroni_dont_2014") font-lock-multiline t)) "3" "2" #("heylen_looking_2012" 0 19 (font-lock-multiline t keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face htmlize-link (:uri "citep:schutze_automatic_1998,heylen_looking_2012,heylen_monitoring_2015") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) org-category "token_waka" fontified t)) #("schutze_automatic_1998" 0 22 (font-lock-multiline t htmlize-link (:uri "citep:schutze_automatic_1998,heylen_looking_2012,heylen_monitoring_2015") help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-ref-cite-face org-category "token_waka" fontified t)) "3" "test" "18" "29" "17" "6" "25" "3" "python" "sh" "23" "tes" "12" "4" "14" "20" "1" "10" "1" "2" "3" "71" "1796" "1799" "1813" "17" "30" "13" "26" "sh" "emacs-lisp" "sh" "524" "2" "Reminder" "0.1" "Reminder" "1" "Reminder" "10" "2" "1" "R" "20" "q>" "33" "python" "/Users/idiig/.emacs.d/modules/" "/Users/idiig/anaconda3/bin/pyflakes s.py"))
(setq swiper-history '(#("vectoro" 0 7 (ivy-index 0)) #(" ** Token-based vectorozation" 0 1 (swiper-line-number 90 display "90  ") 1 2 (fontified t org-category "draft" face org-level-2) 2 4 (fontified t org-category "draft" face org-level-2) 4 29 (fontified t org-category "draft" face org-level-2)) #("kotoshi" 0 7 (ivy-index 0)) #("    /hitotose/, /kozo/, /iwu/, /kotoshi/.  We then can calculate" 0 1 (display "160 " swiper-line-number 160) 1 4 (org-category "draft" fontified t) 4 14 (org-emphasis t font-lock-multiline t face (italic) fontified t org-category "draft") 14 16 (fontified t org-category "draft") 16 22 (org-emphasis t font-lock-multiline t face (italic) fontified t org-category "draft") 22 24 (fontified t org-category "draft") 24 29 (org-emphasis t font-lock-multiline t face (italic) fontified t org-category "draft") 29 30 (fontified t org-category "draft") 30 31 (fontified t org-category "draft") 31 40 (org-emphasis t font-lock-multiline t face (italic) fontified t org-category "draft") 40 43 (fontified t org-category "draft") 43 44 (fontified t org-category "draft") 44 45 (fontified t org-category "draft") 45 46 (fontified t org-category "draft") 46 47 (fontified t org-category "draft") 47 54 (fontified t org-category "draft") 54 55 (fontified t org-category "draft") 55 56 (fontified t org-category "draft") 56 64 (fontified t org-category "draft")) #("sub" 0 3 (ivy-index 0)) #("     |  |  |--- Option Org Export With Sub Superscripts" 0 1 (display "68  " swiper-line-number 68)) #("expor" 0 5 (ivy-index 1)) #("    [+]-- Group Org Export" 0 1 (display "32 " swiper-line-number 32)) #("-" 0 1 (ivy-index 0)) #(" Org group: Outline-based notes management and organizer." 0 1 (display "11 " swiper-line-number 11)) #(" Subgroups:" 0 1 (display "41 " swiper-line-number 41) 1 11 (face custom-group-subtitle)) "file-line" "no" #("engin" 0 5 (ivy-index 0)) #("     (setq latex-build-engine 'xetex)" 0 1 (swiper-line-number 65 display "65  ") 1 6 (fontified t) 6 10 (fontified t face font-lock-keyword-face) 10 37 (fontified t)) #("tex" 0 3 (ivy-index 3)) #("   -rw-r--r--   1 idiig  staff   7.0K May  4  2020 try.tex" 0 1 (swiper-line-number 43 display "43 ") 1 2 (fontified t) 2 49 (invisible dired-hide-details-detail fontified t) 49 50 (invisible dired-hide-details-detail fontified t) 50 51 (fontified t) 51 58 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t)) "cap" "cap" "cap" #("cap" 0 3 (ivy-index 6)) #("   \\caption{点数を平均点で二群にわけ作ったクロス表(分け方の理由は第\\ref{sec:2}を参照する)：学習意欲は質的データと" 0 1 (swiper-line-number 121 display "121 ") 1 69 (fontified nil)) #("or" 0 2 (ivy-index 7)) #("   -rw-r--r--   1 idiig  staff    13K May 28  2020 report.tex" 0 1 (swiper-line-number 35 display "35 ") 1 2 (fontified t) 2 50 (invisible dired-hide-details-detail fontified t) 50 51 (fontified t) 51 59 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t) 59 61 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t)) #("homo" 0 4 (ivy-index 0)) #("   Since polysemes, homophones, metonimic expressions, as well as" 0 1 (swiper-line-number 18 display "18  ") 1 20 (fontified t org-category "draft") 20 30 (fontified t org-category "draft") 30 31 (fontified t org-category "draft") 31 42 (fontified t org-category "draft") 42 53 (fontified t) 53 65 (fontified t org-category "draft")) #("   Since polysemes, homophones, metonimic expressions, as well as" 0 1 (swiper-line-number 18 display "18  ") 1 20 (fontified t org-category "draft") 20 30 (fontified t org-category "draft") 30 31 (fontified t org-category "draft") 31 42 (fontified t org-category "draft") 42 53 (fontified t) 53 65 (fontified t org-category "draft")) #("BERT" 0 4 (ivy-index 1)) #("   [[citep:de_pascale_token-based_2019][e.g.][]]. Models such as BERT" 0 1 (swiper-line-number 70 display "70  ") 1 3 (fontified t org-category "token_waka") 3 39 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") invisible full face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 39 40 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible full face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 40 45 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 45 46 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 46 47 (fontified t org-category "token_waka" help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") invisible full face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 47 48 (fontified t org-category "token_waka" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo (lambda (window object position) (when org-ref-show-citation-on-enter (save-excursion (goto-char position) (let ((s (org-ref-format-entry (org-ref-get-bibtex-key-under-cursor)))) (with-temp-buffer (insert s) (fill-paragraph) (buffer-string)))))) htmlize-link (:uri "citep:de_pascale_token-based_2019") invisible full face org-ref-cite-face mouse-face highlight keymap (keymap (tab lambda nil (interactive) (funcall org-ref-insert-cite-function)) (S-up . org-ref-sort-citation-link) (S-right lambda nil (interactive) (org-ref-swap-citation-link 1)) (S-left lambda nil (interactive) (org-ref-swap-citation-link -1)) (C-right . org-ref-next-key) (C-left . org-ref-previous-key) (16777337 lambda nil "Paste key at point. Assumes the first thing in the killring is a key." (interactive) (org-ref-insert-key-at-point (car kill-ring))) (16777303 lambda nil "Copy all the keys at point." (interactive) (kill-new (org-element-property :path (org-element-context)))) (16777335 lambda nil (interactive) (kill-new (car (org-ref-get-bibtex-key-and-file)))) (16777318 lambda nil (interactive) (save-excursion (org-ref-open-citation-at-point) (kill-new (org-ref-format-bibtex-entry-at-point)))) (16777319 . org-ref-google-scholar-at-point) (16777317 lambda nil "Email entry at point" (interactive) (org-ref-open-citation-at-point) (org-ref-email-bibtex-entry)) (16777315 . org-ref-wos-citing-at-point) (16777330 . org-ref-wos-related-at-point) (16777326 . org-ref-open-notes-at-point) (16777328 lambda nil (interactive) (funcall org-ref-open-pdf-function)) (16777333 . org-ref-open-url-at-point) (16777314 . org-ref-open-citation-at-point) (16777327 . org-ref-cite-hydra/body) (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 48 69 (fontified t org-category "token_waka")) #("   we use the Japanese poetry corpus to fine-tune a pre-trained BERT" 0 1 (swiper-line-number 88 display "88  ") 1 68 (fontified nil org-category "token_waka")) #("res" 0 3 (ivy-index 2)) #("res
     voc_db: results of t2c
     voc_db: results from t2c
     res = {}
                 if variable not in res.keys():
                     res[variable] = set()
                     res[variable].add(variant)
                     res[variable].add(variant)
                 if variable not in res.keys():
                     res[variable] = set()
                     res[variable].add(variant)
                     res[variable].add(variant)
     for key in res.copy().keys():
         if len(res[key]) == 1:
             del res[key]" 3 4 (read-only nil) 4 5 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "9   " swiper-line-number 9) 5 17 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 17 20 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 20 31 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 31 32 (read-only nil) 32 33 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "48  " swiper-line-number 48) 33 45 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 45 48 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 48 61 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 61 62 (read-only nil) 62 63 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "88  " swiper-line-number 88) 63 67 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 67 70 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 70 75 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 75 76 (read-only nil) 76 77 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "99  " swiper-line-number 99) 77 93 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 93 95 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 95 105 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 105 108 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 108 109 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 109 111 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 111 112 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 112 115 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 115 123 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 123 124 (read-only nil) 124 125 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "101 " swiper-line-number 101) 125 145 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 145 148 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-variable-name-face) fontified t) 148 161 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 161 164 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-builtin-face fontified t) 164 166 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 166 167 (read-only nil) 167 168 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "102 " swiper-line-number 102) 168 188 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 188 191 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 191 214 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 214 215 (read-only nil) 215 216 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "105 " swiper-line-number 105) 216 236 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 236 239 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 239 262 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 262 263 (read-only nil) 263 264 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "110 " swiper-line-number 110) 264 280 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 280 282 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 282 292 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 292 295 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 295 296 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 296 298 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 298 299 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 299 302 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 302 310 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 310 311 (read-only nil) 311 312 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "112 " swiper-line-number 112) 312 332 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 332 335 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-variable-name-face) fontified t) 335 348 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 348 351 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-builtin-face fontified t) 351 353 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 353 354 (read-only nil) 354 355 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "113 " swiper-line-number 113) 355 375 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 375 378 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 378 401 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 401 402 (read-only nil) 402 403 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "116 " swiper-line-number 116) 403 423 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 423 425 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 425 426 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 426 449 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 449 450 (read-only nil) 450 451 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "118 " swiper-line-number 118) 451 455 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 455 458 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 458 463 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 463 465 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 465 466 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 466 469 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 469 484 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 484 485 (read-only nil) 485 486 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "120 " swiper-line-number 120) 486 494 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 494 496 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 496 497 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 497 500 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-builtin-face fontified t) 500 501 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 501 504 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 504 516 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 516 517 (read-only nil) 517 518 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "122 " swiper-line-number 122) 518 530 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 530 533 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 533 534 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 534 537 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 537 542 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t)) #("text" 0 4 (ivy-index 2)) #("     for text in txt_db['detail']:" 0 1 (display "88  " swiper-line-number 88) 1 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 14 (fontified t) 14 16 (face font-lock-keyword-face fontified t) 16 24 (fontified t) 24 32 (face font-lock-string-face fontified t) 32 34 (fontified t)) #("     txt_db: textdatabese of Hachidaishu" 0 1 (display "49  " swiper-line-number 49) 1 40 (face font-lock-doc-face fontified t)) #("cor" 0 3 (ivy-index 4)) #("         token for tokens in corpus['entry'].str.split(',')" 0 1 (display "38  " swiper-line-number 38) 1 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 36 (fontified t) 36 43 (face font-lock-string-face fontified t) 43 45 (fontified t) 45 48 (face font-lock-builtin-face fontified t) 48 55 (fontified t) 55 58 (face font-lock-string-face fontified t) 58 59 (fontified t)) #("corpus" 0 6 (ivy-index 2)) #("corpus
     '''Query (doc) frequecy of entries from corpus
     corpus = pd.read_csv(txt_db)  # import corpus
         token for tokens in corpus['contents'].str.split(',')
     ]  # content token list from corpus
         token for tokens in corpus['entry'].str.split(',')
     ]  # lemma entry list from corpus" 0 6 (ivy-index 1) 6 7 (read-only nil) 7 8 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "26  " swiper-line-number 26) 8 12 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 12 13 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face syntax-table (15) fontified t) 13 52 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 52 58 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 58 59 (read-only nil) 59 60 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "31  " swiper-line-number 31) 60 64 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 64 70 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-variable-name-face) fontified t) 70 94 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 94 96 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 96 103 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 103 109 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 109 110 (read-only nil) 110 111 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "33  " swiper-line-number 33) 111 125 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 125 128 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-keyword-face) fontified t) 128 136 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 136 138 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-keyword-face) fontified t) 138 139 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 139 145 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 145 146 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 146 156 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) fontified t) 156 158 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 158 161 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-builtin-face) fontified t) 161 168 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 168 171 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-string-face) fontified t) 171 172 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 172 173 (read-only nil) 173 174 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "35  " swiper-line-number 35) 174 181 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 181 183 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 183 207 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 207 213 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t) 213 214 (read-only nil) 214 215 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "38  " swiper-line-number 38) 215 229 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 229 232 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 232 240 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 240 242 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-keyword-face fontified t) 242 243 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 243 249 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified t) 249 250 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 250 257 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 257 259 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 259 262 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-builtin-face fontified t) 262 269 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 269 272 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-string-face fontified t) 272 273 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 273 274 (read-only nil) 274 275 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "40  " swiper-line-number 40) 275 282 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 282 284 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-delimiter-face fontified t) 284 306 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-comment-face fontified t) 306 312 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-comment-face) fontified t)) #("     corpus: text database of Hachidaishu" 0 1 (display "27  " swiper-line-number 27) 1 41 (face font-lock-doc-face fontified t)) #("I" 0 1 (ivy-index 0)) #("I
     Input (voc_db): results of t2c
     Input (corpus): text database of Hachidaishu
     INPUT 1 (voc_lst): a token list to classify
     INPUT 2 (mono_voc): the vocabulary data of tokens with only one concept for
     INPUT 3 (comp_type): tag for type of relation between classified items
     INPUT 4 (freq): frequency data for tag the token document frequency" 0 1 (ivy-index 0) 1 2 (read-only nil) 2 3 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "9   " swiper-line-number 9) 3 7 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-doc-face) fontified t) 7 8 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 8 37 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") ivy-current-match font-lock-doc-face) fontified t) 37 38 (read-only nil) 38 39 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "27  " swiper-line-number 27) 39 43 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 43 44 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 44 87 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 87 88 (read-only nil) 88 89 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "83  " swiper-line-number 83) 89 93 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 93 94 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 94 136 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 136 137 (read-only nil) 137 138 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "84  " swiper-line-number 84) 138 142 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 142 143 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 143 217 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 217 218 (read-only nil) 218 219 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "86  " swiper-line-number 86) 219 223 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 223 224 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 224 293 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 293 294 (read-only nil) 294 295 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "87  " swiper-line-number 87) 295 299 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t) 299 300 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-doc-face) fontified t) 300 366 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face font-lock-doc-face fontified t)) #("     Input (voc_db): results of t2c" 0 1 (display "9   " swiper-line-number 9) 1 35 (face font-lock-doc-face fontified t)) #("fra" 0 3 (ivy-index 3)) #("   \\MakeFramed{\\hsize#1\\advance\\hsize-\\width\\FrameRestore%" 0 1 (swiper-line-number 145 display "145 ") 3 14 (face font-lock-keyword-face) 15 21 (face font-lock-keyword-face) 23 31 (face font-lock-keyword-face) 31 37 (face font-lock-keyword-face) 38 44 (face font-lock-keyword-face) 44 57 (face font-lock-keyword-face) 57 58 (face font-lock-comment-face)) #("tik" 0 3 (ivy-index 0)) #(" \\usepackage{tikz}" 0 1 (swiper-line-number 44 display "44  ") 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-constant-face) 17 18 (fontified t)) #("sour" 0 4 (ivy-index 5)) #(" \\\\setCJKsansfont{SourceHanSansSC-Regular}" 0 1 (swiper-line-number 726 display "726  ") 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 41 (fontified t face font-lock-string-face) 41 42 (rear-nonsticky t fontified t face font-lock-string-face)) #("xeCJK" 0 5 (ivy-index 0)) #(" \\\\usepackage{xeCJK}" 0 1 (swiper-line-number 723 display "723  ") 1 20 (fontified t face font-lock-string-face)) #("insert src" 0 10 (ivy-index 4)) #("                                                'idiig/org-insert-src-block)))" 0 1 (swiper-line-number 1036 display "1036 ") 1 36 (fontified t) 36 78 (fontified t)) "insert src]" #("                                                'idiig/org-insert-src-block)))" 0 1 (swiper-line-number 1036 display "1036 ") 1 36 (fontified t) 36 78 (fontified t)) "chrom" #("chrom" 0 5 (ivy-index 4)) #("                   \"tell application \\\"Google Chrome\\\"\\n\"" 0 1 (swiper-line-number 251 display "251  ") 1 19 (fontified t) 19 57 (fontified t face font-lock-string-face)) "emph" #("emph" 0 4 (ivy-index 7)) #("     (defmacro idiig|org-emphasize (fname char)" 0 1 (swiper-line-number 1006 display "1006 ") 1 6 (fontified t) 6 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 29 (fontified t face font-lock-function-name-face) 29 34 (fontified t face font-lock-function-name-face) 34 47 (fontified t)) #("     (defmacro idiig|org-emphasize (fname char)" 0 1 (swiper-line-number 1006 display "1006 ") 1 6 (fontified t) 6 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 34 (fontified t face font-lock-function-name-face) 34 47 (fontified t)) #("eval" 0 4 (ivy-index 7)) #("     (setq org-confirm-babel-evaluate nil)" 0 1 (swiper-line-number 933 display "933  ") 1 6 (fontified t) 6 10 (fontified t face font-lock-keyword-face) 10 42 (fontified t)) #("gra" 0 3 (ivy-index 0)) #("     #+BEGIN_SRC R :results output graphics file :file plot-1.pdf :exports both" 0 1 (display "119 " swiper-line-number 119) 1 79 (fontified nil)) #("ob-r" 0 4 (ivy-index 0)) #(" (use-package ob-R" 0 1 (display "619  " swiper-line-number 619) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 18 (face font-lock-constant-face fontified t)) #("url" 0 3 (ivy-index 10)) #(" \\\\usepackage{url}" 0 1 (display "1045 " swiper-line-number 1045) 1 18 (face font-lock-string-face fontified t)) #("hil" 0 3 (ivy-index 0)) #(" @article{hilpert_meaning_2015," 0 1 (display "134 " swiper-line-number 134) 1 9 (face font-lock-function-name-face) 10 30 (face font-lock-constant-face)) #("date" 0 4 (ivy-index 11)) #("date
   date = {2019-06},
   date = {2010-01-01},
   date = {2009-06},
   date = {2020-07},
   date = {2016},
   date = {2012},
   date = {2015},
   date = {2015-12-01},
   date = {2020-10-01},
   date = {2019},
   date = {2019},
   date = {2018-01-14},
   date = {2020},
   date = {2018-06}," 4 5 (read-only nil) 5 6 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "57  " swiper-line-number 57) 6 8 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 8 12 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 12 25 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 25 26 (read-only nil) 26 27 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "68  " swiper-line-number 68) 27 29 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 29 33 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 33 49 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 49 50 (read-only nil) 50 51 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "78  " swiper-line-number 78) 51 53 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 53 57 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 57 70 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 70 71 (read-only nil) 71 72 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "89  " swiper-line-number 89) 72 74 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 74 78 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 78 91 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 91 92 (read-only nil) 92 93 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "101 " swiper-line-number 101) 93 95 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 95 99 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 99 109 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 109 110 (read-only nil) 110 111 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "114 " swiper-line-number 114) 111 113 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 113 117 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2 fontified nil) 117 127 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified nil) 127 128 (read-only nil) 128 129 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "127 " swiper-line-number 127) 129 131 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 131 135 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-variable-name-face) fontified t) 135 145 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 145 146 (read-only nil) 146 147 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "138 " swiper-line-number 138) 147 149 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 149 153 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ((:foreground "#ffffea") (background-color . "#7fff70efa01a") . ivy-minibuffer-match-face-2) fontified t) 153 169 (read-only nil face ((:foreground "#ffffea") ivy-current-match) help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 169 170 (read-only nil) 170 171 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "152 " swiper-line-number 152) 171 173 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 173 177 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face (ivy-minibuffer-match-face-2 font-lock-variable-name-face) fontified t) 177 193 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight fontified t) 193 194 (read-only nil) 194 195 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "168 " swiper-line-number 168) 195 197 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 197 201 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2) 201 211 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 211 212 (read-only nil) 212 213 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "182 " swiper-line-number 182) 213 215 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 215 219 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2) 219 229 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 229 230 (read-only nil) 230 231 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "194 " swiper-line-number 194) 231 233 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 233 237 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2) 237 253 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 253 254 (read-only nil) 254 255 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "209 " swiper-line-number 209) 255 257 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 257 261 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2) 261 271 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 271 272 (read-only nil) 272 273 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight display "221 " swiper-line-number 221) 273 275 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight) 275 279 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight face ivy-minibuffer-match-face-2) 279 292 (read-only nil help-echo (format (if tooltip-mode "mouse-1: %s
mouse-3: %s" "mouse-1: %s   mouse-3: %s") ivy-mouse-1-tooltip ivy-mouse-3-tooltip) mouse-face ivy-minibuffer-match-highlight)) #(" @article{hilpert_meaning_2015," 0 1 (display "134 " swiper-line-number 134) 1 31 (fontified nil)) #("org-R" 0 5 (ivy-index 0)) #("            (:session . \"*org-R*\")" 0 1 (swiper-line-number 634 display "634  ") 1 13 (fontified t) 13 21 (fontified t face font-lock-builtin-face) 21 24 (fontified t) 24 33 (fontified t face font-lock-string-face) 33 34 (fontified t)) "trans" "fontspa" #(" Show Value Org Babel Latex Htlatex " 0 1 (swiper-line-number 72 display "72  ") 1 11 (display (image :type xpm :file "/usr/local/Cellar/emacs-plus@27/27.2/share/emacs/27.2/etc/images/custom/right.xpm" :ascent center) rear-nonsticky t keymap (keymap (111 . image-save) (114 . image-rotate) (C-mouse-4 . image-mouse-increase-size) (C-wheel-up . image-mouse-increase-size) (C-mouse-5 . image-mouse-decrease-size) (C-wheel-down . image-mouse-decrease-size) (43 . image-increase-size) (45 . image-decrease-size)))) #("latex" 0 5 (ivy-index 0)) #(" Show Value Org Babel Latex Htlatex " 0 1 (swiper-line-number 72 display "72  ") 1 11 (display (image :type xpm :file "/usr/local/Cellar/emacs-plus@27/27.2/share/emacs/27.2/etc/images/custom/right.xpm" :ascent center) rear-nonsticky t keymap (keymap (111 . image-save) (114 . image-rotate) (C-mouse-4 . image-mouse-increase-size) (C-wheel-up . image-mouse-increase-size) (C-mouse-5 . image-mouse-decrease-size) (C-wheel-down . image-mouse-decrease-size) (43 . image-increase-size) (45 . image-decrease-size)))) #("    The htlatex command to enable conversion of latex to SVG or HTML." 0 1 (swiper-line-number 73 display "73  ") 1 4 (display (space :align-to 3))) #("tikz" 0 4 (ivy-index 0)) #("             (:headers '(\"\\\\usepackage{tikz}\"))" 0 1 (display "658  " swiper-line-number 658) 1 14 (fontified t) 14 22 (face font-lock-builtin-face fontified t) 22 25 (fontified t) 25 45 (face font-lock-string-face fontified t) 45 47 (fontified t)) #("ob la" 0 5 (ivy-index 0)) #(" (use-package ob-latex" 0 1 (display "644  " swiper-line-number 644) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 22 (face font-lock-constant-face fontified t)) #("minted" 0 6 (ivy-index 0)) #("       (setq org-latex-listings 'minted)" 0 1 (swiper-line-number 935 display "935  ") 1 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 40 (fontified t)) #("       (setq org-latex-listings 'minted)" 0 1 (swiper-line-number 935 display "935  ") 1 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 40 (fontified t)) #("py" 0 2 (ivy-index 6)) #("             (:session . \"*org-python*\")" 0 1 (swiper-line-number 605 display "605  ") 1 14 (fontified t) 14 22 (fontified t face font-lock-builtin-face) 22 25 (fontified t) 25 39 (fontified t face font-lock-string-face) 39 40 (fontified t)) #("cs" 0 2 (ivy-index 28)) #(" \\\\usepackage{csquotes}" 0 1 (swiper-line-number 971 display "971  ") 1 23 (fontified t face font-lock-string-face)) "bib" #("R" 0 1 (ivy-index 27)) #("             (:session . \"*org-R*\")" 0 1 (swiper-line-number 633 display "633  ") 1 14 (fontified t) 14 22 (fontified t face font-lock-builtin-face) 22 25 (fontified t) 25 34 (fontified t face font-lock-string-face) 34 35 (fontified t)) #("habi" 0 4 (ivy-index 2)) #("    :STYLE:    habit" 0 1 (swiper-line-number 123 display "123 ") 1 4 (fontified t org-category "gtd") 4 5 (fontified t org-category "gtd" face org-special-keyword) 5 7 (fontified t org-category "gtd" face org-special-keyword) 7 8 (fontified t org-category "gtd" face org-special-keyword) 8 10 (fontified t org-category "gtd" face org-special-keyword) 10 11 (fontified t org-category "gtd" face org-special-keyword) 11 13 (fontified t org-category "gtd") 13 14 (fontified t org-category "gtd") 14 15 (fontified t org-category "gtd") 15 20 (fontified t org-category "gtd" face org-property-value)) #("    :STYLE:    habit" 0 1 (swiper-line-number 123 display "123 ") 1 4 (fontified t org-category "gtd") 4 5 (fontified t org-category "gtd" face org-special-keyword) 5 7 (fontified t org-category "gtd" face org-special-keyword) 7 8 (fontified t org-category "gtd" face org-special-keyword) 8 10 (fontified t org-category "gtd" face org-special-keyword) 10 11 (fontified t org-category "gtd" face org-special-keyword) 11 13 (fontified t org-category "gtd") 13 14 (fontified t org-category "gtd") 14 15 (fontified t org-category "gtd") 15 20 (fontified t org-category "gtd" face org-property-value)) "contain"))
(setq counsel-ibuffer-history '(#("     idiig-core.el            426 ELisp/d          ~/.emacs.d/core/idiig-core.el" 0 80 (ivy-index 4 idx 4)) #(" *   idiig-better-ed...      2880 ELisp/d          ~/.emacs.d/core/idiig-better-editor.el" 0 89 (idx 4 ivy-index 4)) #(" *   idiig-project-s...      5148 ELisp/d          ~/.emacs.d/modules/idiig-project-search-management.el" 0 104 (idx 5 ivy-index 5)) #("     *scratch*                144 Lisp Interaction " 0 51 (idx 0 ivy-index 0)) #(" *   *helm-ag*                533 Hmm              " 0 51 (idx 2 ivy-index 2)) #(" *   *scratch*                146 Lisp Interaction " 0 51 (ivy-index 1 idx 1)) #(" *%  *Messages*               375 Messages         " 0 51 (idx 1 ivy-index 1)) #("     *scratch*                145 Lisp Interaction " 0 51 (idx 0 ivy-index 0))))
(setq ivy-history '(#("org idiig" 0 9 (ivy-index 6)) "/Users/idiig/.emacs.d/modules/idiig-org.el" #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org" 0 62 (ivy-index 0)) #("ex.2" 0 4 (ivy-index 0)) #("org" 0 3 (ivy-index 0)) #("yamamoto_hachidaishu_2010" 0 25 (ivy-index 1 idx 24)) #("https://github.com/idiig/token-waka-1.git" 0 41 (ivy-index 0)) #("waka dra" 0 8 (ivy-index 1)) #("fig:token-base-ex" 0 17 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/type-base-ex.tex" 0 73 (ivy-index 1)) #("fig:type-base-ex" 0 16 (ivy-index 0)) #("tex" 0 3 (ivy-index 1)) "/Users/idiig/.emacs.d/modules/idiig-tex.el" #("org psy" 0 7 (ivy-index 0)) "/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/reg-als/reg.org" #("waka" 0 4 (ivy-index 4)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("pyt" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-python.el" #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py" 0 73 (ivy-index 3)) #("pr" 0 2 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-prog.el" #("pyth" 0 4 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-python.el" #("64339ed|fixed python major mode prefix|idiig" 0 44 (idx 1 ivy-index 1)) #("3f79002|my emacs ver.1|Xudong Chen" 0 34 (idx 0 ivy-index 0)) #("pro" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-prog.el" #("python" 0 6 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-python.el" #("/_minted-test/" 0 14 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" #("draft.tex" 0 9 (ivy-index 2)) #("/Users/idiig/emacs-test/test.org" 0 32 (ivy-index 3)) #("/Users/idiig/.emacs.d/modules/idiig-org.el" 0 42 (ivy-index 1)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("*Messages*" 0 10 (ivy-index 3)) #("*Org PDF LaTeX Output*" 0 22 (ivy-index 5)) #("tes" 0 3 (ivy-index 1)) #("idiig org" 0 9 (ivy-index 3)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("test" 0 4 (ivy-index 0)) #("idiig-org" 0 9 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("ttt" 0 3 (ivy-index 1)) "/Users/idiig/emacs-test/test2/ttttt.org" #("psy" 0 3 (ivy-index 0)) "/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/reg-als/reg.org" #("/Users/idiig/Nutstore/works/on_work/token_waka/test/eeee.org" 0 60 (ivy-index 5)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" #("/Users/idiig/emacs-test/test2/ttttt.org" 0 39 (ivy-index 4)) #("/Users/idiig/Nutstore/bibfolder/bibliography.bib" 0 48 (ivy-index 0)) #("bibli" 0 5 (ivy-index 0)) #("tttt" 0 4 (ivy-index 1)) "/Users/idiig/emacs-test/test2/ttttt.tex" #("idiig" 0 5 (ivy-index 1)) #("b2b8d55|added ob-latex|idiig" 0 28 (ivy-index 3 idx 3)) #("0a60093|org-babel R config|idiig" 0 32 (ivy-index 3 idx 3)) #("/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org" 0 61 (ivy-index 9)) #("/Users/idiig/emacs-test/test2/ttttt.tex" 0 39 (ivy-index 1)) #("cfea77f|added chrome url grab function; updated org-ref/roam keybindings|idiig" 0 78 (ivy-index 18 idx 18)) #("/Users/idiig/emacs-test/token_waka.bib" 0 38 (ivy-index 1)) #("token waka bi" 0 13 (ivy-index 1)) #("token bi" 0 8 (ivy-index 1)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.bib" #("bib" 0 3 (ivy-index 0)) #("token bib" 0 9 (ivy-index 0)) "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.bbl" "d46e9ab|changed org-ref, org-roam-bibtex's position; added org-noter|idiig" "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" #("late" 0 4 (ivy-index 2)) #("b57d989|deleted ja-notes latex class; added minted for codes.|idiig" 0 67 (ivy-index 14 idx 14)) #("81fa60e|modified org latex output 2|idiig" 0 41 (ivy-index 8 idx 8)) #("*Org Preview LaTeX Output*" 0 26 (ivy-index 8)) #("82527ca|fixed python; changed default org-latex-export|idiig" 0 60 (idx 12 ivy-index 12)) #("idiig-org.el" 0 12 (ivy-index 2)) #("/Users/idiig/emacs-test/test.svg" 0 32 (ivy-index 0)) #("cus" 0 3 (ivy-index 0)) "/Users/idiig/.emacs.d/core/custom.el" #("idiig-ui" 0 8 (ivy-index 0)) "/Users/idiig/.emacs.d/core/idiig-ui.el" #("r" 0 1 (ivy-index 0)) #("*Org-Babel Error Output*" 0 24 (ivy-index 9)) #("/Users/idiig/.emacs.d/core/custom.el" 0 36 (ivy-index 1)) #("org-latex" 0 9 (ivy-index 0)) #("org-export-latex" 0 16 (ivy-index 1)) #("org-babel" 0 9 (ivy-index 1)) #("/Users/idiig/Nutstore/org-files/notes.org" 0 41 (ivy-index 2)) #("ja" 0 2 (ivy-index 0)) "/Users/idiig/.emacs.d/modules/idiig-japanese.el" "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" #("/Users/idiig/.emacs.d/core/idiig-better-default.el" 0 50 (ivy-index 3)) #("d" 0 1 (ivy-index 0)) #("bet" 0 3 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" 0 61 (ivy-index 9)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.tex" 0 61 (ivy-index 1)) #("*Org LATEX Export*" 0 18 (ivy-index 2))))
(setq counsel-M-x-history '(#("customize gr" 0 12 (ivy-index 0)) "customize-group" #("open link" 0 9 (ivy-index 3)) "org-link-open-from-string" #("open lin" 0 8 (ivy-index 2)) "evil-org-open-links" #("pyim s" 0 6 (ivy-index 0)) "pyim-start" #("magit-reset" 0 11 (ivy-index 0)) #("magit rese" 0 10 (ivy-index 0)) #("ediff" 0 5 (ivy-index 0)) "customize-group" #("latex pre" 0 9 (ivy-index 3)) "org-latex-preview" #("customize-group" 0 15 (ivy-index 0)) #("pyim" 0 4 (ivy-index 0)) "pyim-start" #("inline p" 0 8 (ivy-index 3)) "org-redisplay-inline-images" #("tex-compile" 0 11 (ivy-index 0)) #("tex compil" 0 10 (ivy-index 0)) #("chrom" 0 5 (ivy-index 4)) "idiig/insert-chrome-current-tab-url" #("org-noter" 0 9 (ivy-index 0)) #("org noter" 0 9 (ivy-index 0)) #("org no" 0 6 (ivy-index 0)) #("org-roam-capture" 0 16 (ivy-index 0)) #("org roam ca" 0 11 (ivy-index 0)) #("refresh" 0 7 (ivy-index 2)) "deft-refresh" #("customize grou" 0 14 (ivy-index 0)) #("org-open-at-point" 0 17 (ivy-index 0)) #("deft " 0 5 (ivy-index 3)) "deft-refresh" #("de" 0 2 (ivy-index 0)) #("deft" 0 4 (ivy-index 0)) #("def" 0 3 (ivy-index 0)) #("open po" 0 7 (ivy-index 0)) #("open poi" 0 8 (ivy-index 0)) #("org-roam" 0 8 (ivy-index 0)) #("org roam" 0 8 (ivy-index 0)) #("helm-resume" 0 11 (ivy-index 0)) #("helm res" 0 8 (ivy-index 0)) #("helm resu" 0 9 (ivy-index 0)) #("orc" 0 3 (ivy-index 0)) #("org " 0 4 (ivy-index 11)) #("org ref show " 0 13 (ivy-index 0)) "org-table-show-reference" #("org-show-entry" 0 14 (ivy-index 0)) #("org entry sho" 0 13 (ivy-index 0)) #("bibtex org" 0 10 (ivy-index 20)) "org-ref-bibtex-file/body" #("bibtex" 0 6 (ivy-index 8)) "bibtex-entry" #("helm bib" 0 8 (ivy-index 2)) "helm-bibtex-with-notes" #("helm-bibtex" 0 11 (ivy-index 0)) #("oro" 0 3 (ivy-index 7)) "org-ref-bibtex" #("org agenda " 0 11 (ivy-index 20)) "org-agenda-columns" #("org agenda" 0 10 (ivy-index 106)) "org-agenda-clockreport-mode" "org-agenda-set-property" #("or" 0 2 (ivy-index 0)) "org-toggle-pretty-entities" #("pretty" 0 6 (ivy-index 3)) "org-toggle-pretty-entities" #("org-agenda-columns" 0 18 (ivy-index 0)) #("doo" 0 3 (ivy-index 0)) "doom-modeline-mode" #("zett" 0 4 (ivy-index 1)) "zetteldeft-new-file" #("cust gr" 0 7 (ivy-index 0)) #("package-autoremove" 0 18 (ivy-index 0)) #("auto re" 0 7 (ivy-index 1)) #("magit" 0 5 (ivy-index 0)) #("ignore gi" 0 9 (ivy-index 2)) "magit-gitignore" #("org" 0 3 (ivy-index 7)) "org-yank" #("bench" 0 5 (ivy-index 4)) "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" #("benc" 0 4 (ivy-index 4)) "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark-init/show-durations-tree" "benchmark-init/show-durations-tabulated" "benchmark"))
(setq evil-ex-history '(#("%s/roam-notes/research-notes" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28)) #("%s/org-notes/org-files" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("%s/-for-mode 'prog-mode/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24)) #("%s/lsp/prog" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("%s/\"SPC/\"C-SPC" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("%s/define-key dir/evil-define-key 'normal dir" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("%s/green/red" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("%s/\"SPC /," 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("%s/\"m/\"SPC m" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("%s/idiig\\/.+-for-mode/which-key-declare-prefixes" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48)) #("%s/idiig\\/dec/ssss" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/idiig.+for-mode/which-key-declare-prefixes " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46)) #("%s/which-key-/idiig\\/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("%s/evil-leader\\/set-key-for-mode/idiig\\/set-leader-keys-for-minor-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56) 56 57 (ex-index 57) 57 58 (ex-index 58) 58 59 (ex-index 59) 59 60 (ex-index 60) 60 61 (ex-index 61) 61 62 (ex-index 62) 62 63 (ex-index 63) 63 64 (ex-index 64) 64 65 (ex-index 65) 65 66 (ex-index 66) 66 67 (ex-index 67) 67 68 (ex-index 68) 68 69 (ex-index 69) 69 70 (ex-index 70)) #("%s/)/\"" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("%s/(/,\"" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("%s/\\//," 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("%s/-test/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("%s/spacemacs\\/python/pytest" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("%s/\\n/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("（" 0 1 (ex-index 1)) #("%s/spacemacs/idiig" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/spacemacs/ifiig" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("%s/defvar/s" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("'<,'>" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5))))
(setq buffer-name-history '("*scratch*" "all_7.csv"))
(setq file-name-history '(#("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/khky-train.txt" 0 67 (ivy-index 2)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds.csv" 0 60 (ivy-index 8)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/" 0 53 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/token-base-ex.tex" 0 74 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/type-base-ex.pdf" 0 73 (ivy-index 3)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/auto/" 0 62 (ivy-index 3)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/type-base-ex.tex" 0 73 (ivy-index 0)) #("/Users/idiig/Nutstore/works/proposal/" 0 37 (ivy-index 5)) #("/Users/idiig/Nutstore/lecture/M1_2Q/" 0 36 (ivy-index 4)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/" 0 47 (ivy-index 0)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/assignment/asi2/report.tex" 0 73 (ivy-index 21)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/assignment/" 0 58 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org" 0 62 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/" 0 47 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py" 0 73 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/tk_vec.py" 0 62 (ivy-index 11)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/preprocessing.py" 0 69 (ivy-index 18)) #("/Users/idiig/.emacs.d/tmp/draft.tex" 0 35 (ivy-index 0)) #("/Users/idiig/emacs-test/" 0 24 (ivy-index 0)) #("/Users/idiig/emacs-test/test2/" 0 30 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/" 0 36 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/test/" 0 52 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/test/eeee.org" 0 60 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/Exported Items/" 0 62 (ivy-index 2)) #("/Users/idiig/emacs-test/token_waka.bib" 0 38 (ivy-index 0)) #("/Users/idiig/emacs-test/test2/ttttt.org" 0 39 (ivy-index 0)) #("/Users/idiig/.emacs.d/tmp/" 0 26 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/" 0 30 (ivy-index 0)) #("/Users/idiig/.emacs.d/tmp/tex" 0 29 (ivy-index 2)) #("/Users/idiig/.emacs.d/dependencies/textmp" 0 41 (ivy-index 0)) #("/Users/idiig/.emacs.d/dependencies/" 0 35 (ivy-index 15)) #("/Users/idiig/emacs-test/contour.svg" 0 35 (ivy-index 18)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/reg-als/" 0 55 (ivy-index 0)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/reg-als/reg.org" 0 62 (ivy-index 4)) #("/Users/idiig/Nutstore/lecture/M1_12Q/psych_edu/assignment/asi3/psych-edu-asi-3.org" 0 82 (ivy-index 8)) #("/Users/idiig/Nutstore/lecture/" 0 30 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org" 0 61 (ivy-index 0)) #("/Users/idiig/emacs-test/test.org" 0 32 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/" 0 32 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/org-roam.db" 0 43 (ivy-index 0)) #("/Users/idiig/.emacs.d/core/" 0 27 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/bibnotes/" 0 41 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/bibnotes/test.org" 0 49 (ivy-index 2)) #("/Users/idiig/.emacs.d/modules/idiig-tex.el" 0 42 (ivy-index 0)) #("/Users/idiig/" 0 13 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/org-roam-server.org" 0 51 (ivy-index 0)) #("/Users/idiig/.emacs.d/" 0 22 (ivy-index 0)) #("/Users/idiig/.emacs.d/.gitignore" 0 32 (ivy-index 0)) #("/Users/idiig/.emacs.d/.git/" 0 27 (ivy-index 2)) #("/Users/idiig/.gitignore" 0 23 (ivy-index 0)) #("/Users/idiig/.emacs.d/.git/.gitignore" 0 37 (ivy-index 0)) #("/Users/idiig/git/spacemacs/init.el" 0 34 (ivy-index 10)) #("/Users/idiig/git/spacemacs_config-based-on-zilongshanren-/" 0 58 (ivy-index 1)) #("/Users/idiig/.emacs.d/core/idiig-evil.el" 0 40 (ivy-index 0)) #("/Users/idiig/.emacs.d/.cache/" 0 29 (ivy-index 6)) #("/Users/idiig/.emacs.d/modules/idiig-git.el" 0 42 (ivy-index 0)) #("/Users/idiig/Downloads/log" 0 26 (ivy-index 0)) #("/Users/idiig/Downloads/plan9.itermcolors" 0 40 (ivy-index 0)) #("/Users/idiig/Downloads/pencil-light.itermcolors" 0 47 (ivy-index 0)) #("/Users/idiig/emacs-test/test.el" 0 31 (ivy-index 0)) #("/Users/idiig/Nutstore/org-notes/gtd.org" 0 39 (ivy-index 2)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/kaekotoba.csv" 0 66 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/kakekotoba.txt" 0 67 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/engo.txt" 0 61 (ivy-index 0)) #("/Users/idiig/Nutstore/works/" 0 28 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-python.el" 0 45 (ivy-index 6)) #("/Users/idiig/.emacs.d/modules/idiig-org.el" 0 42 (ivy-index 4)) #("/Users/idiig/.emacs.d/modules/idiig-evil-evilified-state.el" 0 59 (ivy-index 0)) #("/Users/idiig/.emacs.d/init.el" 0 29 (ivy-index 8)) #("/Users/idiig/.emacs.d/eshell/" 0 29 (ivy-index 8)) #("/Users/idiig/.emacs.d/core/.DS_Store" 0 36 (ivy-index 4)) #("/Users/idiig/.emacs.d/core/idiig-ui.el" 0 38 (ivy-index 4)) "~/.emacs.d/modules/idiig-better-search.el" #("/Users/idiig/.emacs.d/modules/idiig-ess.el" 0 42 (ivy-index 0)) #("/Users/idiig/emacs-test/s.r" 0 27 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-r.el" 0 40 (ivy-index 2)) #("/Users/idiig/emacs-test/s.org" 0 29 (ivy-index 0)) #("/Users/idiig/emacs-test/s.py" 0 28 (ivy-index 0)) #("/Users/idiig/.emacs.d/modules/idiig-prog.el" 0 43 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/draft.txt" 0 56 (ivy-index 3)) #("/Users/idiig/Nutstore/works/on_work/token_waka/test.tex" 0 55 (ivy-index 0)) #("/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.pdf" 0 61 (ivy-index 3)) #("/Users/idiig/Downloads/" 0 23 (ivy-index 0)) #("/Users/idiig/Downloads/文本-F3F46926A5D2-1.txt" 0 44 (ivy-index 6)) #("/Users/idiig/Downloads/test.org" 0 31 (ivy-index 0)) #("/Users/idiig/Downloads/#test.org#" 0 33 (ivy-index 4)) #("/Users/idiig/emacstest/test.bib" 0 31 (ivy-index 0)) #("/Users/idiig/emacstest/chicago.bst" 0 34 (ivy-index 0)) #("/Users/idiig/emacstest/agsm.bst" 0 31 (ivy-index 0)) #("/Users/idiig/emacstest/org.log" 0 30 (ivy-index 3)) #("/Users/idiig/emacstest/unified.bst" 0 34 (ivy-index 0)) #("/Users/idiig/emacstest/" 0 23 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_31_11.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_23_21.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_16_29.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_14_29.txt" 0 43 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_5_1.txt" 0 41 (ivy-index 0)) #("/Users/idiig/non_parallel_test/kj_4_09.txt" 0 42 (ivy-index 0)) #("/Users/idiig/test_2.csv" 0 23 (ivy-index 0))))
(setq extended-command-history '("evil-surround-change" "recentf-open-files" "company-quickhelp-manual-begin" "company-mode" "kill-buffer" "company-mode" "idiig/auto-completion-key-sequence-end" "auto-complete" "autoconf-mode" "auto-complete" "company-complete" "company-quickhelp-mode" "company-select-next" "company-quickhelp-mode" "eval-buffer"))
(setq evil-jumps-history '((9218 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (9154 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (8702 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (7609 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1793 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (4553 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (3260 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (4295 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (4295 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1290 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1290 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1290 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (8896 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (818 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/token-base-ex.tex") (2503 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/token-base-ex.tex") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/token-base-ex.tex") (3074 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1984 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/type-base-ex.pdf") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/fig/type-base-ex.pdf") (1749 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (788 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (3113 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1291 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1291 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (600 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (2004 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (12057 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/draft.org") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (8135 "/Users/idiig/Nutstore/works/on_work/token_waka/token_waka.org") (3949 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (2596 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (7051 "/Users/idiig/.emacs.d/modules/idiig-prog.el") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (402 "/Users/idiig/.emacs.d/modules/idiig-python.el") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (402 "/Users/idiig/.emacs.d/modules/idiig-python.el") (1559 "/Users/idiig/.emacs.d/modules/idiig-python.el") (1511 "/Users/idiig/.emacs.d/modules/idiig-python.el") (272 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (272 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py") (1 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/obtain_comp_pairs.py") (272 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py") (272 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/hds_eval_exp.py") (2732 "/Users/idiig/Nutstore/works/on_work/token_waka/exp_1/test.org") (28259 "/Users/idiig/.emacs.d/modules/idiig-org.el") (28180 "/Users/idiig/.emacs.d/modules/idiig-org.el")))
(setq search-ring '(#("avy" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("transient-state" 0 15 (isearch-case-fold-search t isearch-regexp-function nil)) #("idiig-packages/packages" 0 23 (isearch-case-fold-search t isearch-regexp-function nil)) #("auto-completion-complete-with-key-sequence" 0 42 (isearch-case-fold-search t isearch-regexp-function nil)) #(")" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #(": )" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("company-complete-common-or-cycle" 0 32 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '("vectoro" "kotoshi" "sub" "expor" "-" "sub" "engin" "tex" "cap" "or" "homo" "BERT" "text" "cor" "corpus" "I"))
